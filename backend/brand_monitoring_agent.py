"""
Agent de Surveillance Marque 24/7 - JOSMOSE.COM
Surveille en permanence que :
1. Aucune mention "emergent" ou "made with emergent" n'appara√Æt
2. Le site reste toujours www.josmose.com
3. Aucune r√©f√©rence ind√©sirable dans le code ou l'interface

FONCTIONNEMENT 24/7 : Cet agent se lance automatiquement au d√©marrage du serveur
et continue de surveiller ind√©finiment chaque minute.
"""

import os
import time
import asyncio
import logging
import re
from datetime import datetime
from typing import List, Dict, Set
import requests
from pathlib import Path
import json
from motor.motor_asyncio import AsyncIOMotorClient

# Configuration de l'agent
MONITORING_CONFIG = {
    "check_interval": 60,  # V√©rification toutes les 60 secondes (1 minute)
    "frontend_url": os.environ.get("REACT_APP_BACKEND_URL", "https://67c818fa-35d3-46a9-b7df-5b06cb23e4f4.preview.emergentagent.com").replace("/api", ""),
    "crm_url": os.environ.get("REACT_APP_BACKEND_URL", "https://67c818fa-35d3-46a9-b7df-5b06cb23e4f4.preview.emergentagent.com").replace("/api", "") + "/crm",
    "scan_directories": ["/app/frontend/src", "/app/backend", "/app"],
    "excluded_files": [".git", "node_modules", "__pycache__", ".emergent", "brand_monitoring_agent.py"],
    "alert_threshold": 1  # Alerter imm√©diatement apr√®s la premi√®re d√©tection
}

# Mots interdits √† surveiller (case-insensitive)
FORBIDDEN_TERMS = [
    "emergent",
    "made with emergent",
    "emergentagent",
    "emergent.com",
    "preview.emergentagent.com"
]

# Termes autoris√©s (pour √©viter les faux positifs)
ALLOWED_TERMS = [
    "emergency",  # Mot diff√©rent, autoris√©
    "emerging",   # Mot diff√©rent, autoris√©
    "merged",     # Mot diff√©rent, autoris√©
]

class BrandMonitoringAgent:
    def __init__(self):
        self.mongo_client = AsyncIOMotorClient(os.getenv("MONGO_URL", "mongodb://localhost:27017"))
        self.db = self.mongo_client[os.getenv("DB_NAME", "test_database")]
        self.setup_logging()
        self.running = False
        self.violation_count = 0
        self.last_scan_results = {}

    def setup_logging(self):
        """Configuration du syst√®me de logging"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - BrandMonitor - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('/var/log/brand_monitoring.log'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)

    def is_forbidden_term(self, text: str) -> List[Dict]:
        """
        V√©rifie si le texte contient des termes interdits
        Retourne la liste des violations trouv√©es
        """
        violations = []
        text_lower = text.lower()
        
        for term in FORBIDDEN_TERMS:
            if term.lower() in text_lower:
                # V√©rifier que ce n'est pas un terme autoris√©
                is_allowed = False
                for allowed in ALLOWED_TERMS:
                    if allowed.lower() in text_lower:
                        is_allowed = True
                        break
                
                if not is_allowed:
                    # Trouver les positions exactes
                    pattern = re.compile(re.escape(term), re.IGNORECASE)
                    matches = pattern.finditer(text)
                    
                    for match in matches:
                        violations.append({
                            "term": term,
                            "found_text": match.group(),
                            "position": match.start(),
                            "context": text[max(0, match.start()-50):match.end()+50]
                        })
        
        return violations

    async def scan_file_content(self, file_path: str) -> List[Dict]:
        """
        Scanne le contenu d'un fichier pour d√©tecter les violations
        """
        violations = []
        
        try:
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
                
            file_violations = self.is_forbidden_term(content)
            
            for violation in file_violations:
                violations.append({
                    **violation,
                    "file": file_path,
                    "type": "file_content"
                })
                
        except Exception as e:
            self.logger.error(f"Erreur lecture fichier {file_path}: {str(e)}")
        
        return violations

    async def scan_directory(self, directory: str) -> List[Dict]:
        """
        Scanne r√©cursivement un r√©pertoire pour d√©tecter les violations
        """
        violations = []
        
        try:
            for root, dirs, files in os.walk(directory):
                # Exclure certains r√©pertoires
                dirs[:] = [d for d in dirs if not any(excluded in d for excluded in MONITORING_CONFIG["excluded_files"])]
                
                for file in files:
                    # Exclure certains types de fichiers
                    if any(excluded in file for excluded in MONITORING_CONFIG["excluded_files"]):
                        continue
                    
                    # V√©rifier seulement les fichiers texte/code
                    if file.endswith(('.py', '.js', '.jsx', '.ts', '.tsx', '.html', '.css', '.json', '.md', '.txt', '.env')):
                        file_path = os.path.join(root, file)
                        file_violations = await self.scan_file_content(file_path)
                        violations.extend(file_violations)
                        
        except Exception as e:
            self.logger.error(f"Erreur scan r√©pertoire {directory}: {str(e)}")
        
        return violations

    async def scan_web_content(self, url: str) -> List[Dict]:
        """
        Scanne le contenu web visible pour d√©tecter les violations
        """
        violations = []
        
        try:
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                content = response.text
                
                web_violations = self.is_forbidden_term(content)
                
                for violation in web_violations:
                    violations.append({
                        **violation,
                        "url": url,
                        "type": "web_content"
                    })
            else:
                self.logger.warning(f"Impossible d'acc√©der √† {url}: {response.status_code}")
                
        except Exception as e:
            self.logger.error(f"Erreur scan web {url}: {str(e)}")
        
        return violations

    async def check_domain_consistency(self) -> List[Dict]:
        """
        V√©rifie que les r√©f√©rences au domaine sont coh√©rentes (josmose.com)
        """
        violations = []
        
        # V√©rifier les fichiers de configuration
        config_files = [
            "/app/frontend/.env",
            "/app/backend/.env",
            "/app/frontend/package.json"
        ]
        
        correct_domain = "josmose.com"
        incorrect_domains = [
            "osmose.com",
            "emergentagent.com",
            "preview.emergentagent.com"
        ]
        
        for config_file in config_files:
            try:
                if os.path.exists(config_file):
                    with open(config_file, 'r') as f:
                        content = f.read()
                    
                    for incorrect_domain in incorrect_domains:
                        if incorrect_domain in content and "preview.emergentagent.com" not in config_file:
                            violations.append({
                                "term": incorrect_domain,
                                "found_text": incorrect_domain,
                                "file": config_file,
                                "type": "domain_inconsistency",
                                "context": f"Domaine incorrect trouv√© : {incorrect_domain}"
                            })
            except Exception as e:
                self.logger.error(f"Erreur v√©rification domaine {config_file}: {str(e)}")
        
        return violations

    async def perform_full_scan(self) -> Dict:
        """
        Effectue un scan complet de tous les √©l√©ments surveill√©s
        """
        scan_start = datetime.utcnow()
        all_violations = []
        
        self.logger.info("üîç D√©but du scan complet de surveillance marque...")
        
        # 1. Scanner les r√©pertoires de code
        for directory in MONITORING_CONFIG["scan_directories"]:
            if os.path.exists(directory):
                self.logger.info(f"üìÇ Scan du r√©pertoire: {directory}")
                dir_violations = await self.scan_directory(directory)
                all_violations.extend(dir_violations)
        
        # 2. Scanner le contenu web visible
        web_urls = [
            MONITORING_CONFIG["frontend_url"],
            MONITORING_CONFIG["crm_url"]
        ]
        
        for url in web_urls:
            self.logger.info(f"üåê Scan de l'URL: {url}")
            web_violations = await self.scan_web_content(url)
            all_violations.extend(web_violations)
        
        # 3. V√©rifier la coh√©rence des domaines
        self.logger.info("üè∑Ô∏è V√©rification coh√©rence domaines...")
        domain_violations = await self.check_domain_consistency()
        all_violations.extend(domain_violations)
        
        # Compilation des r√©sultats
        scan_results = {
            "scan_time": scan_start,
            "duration_seconds": (datetime.utcnow() - scan_start).total_seconds(),
            "violations_found": len(all_violations),
            "violations": all_violations,
            "status": "CLEAN" if len(all_violations) == 0 else "VIOLATIONS_DETECTED"
        }
        
        # Log des r√©sultats
        if len(all_violations) == 0:
            self.logger.info("‚úÖ SCAN TERMIN√â - AUCUNE VIOLATION D√âTECT√âE")
            self.violation_count = 0
        else:
            self.logger.warning(f"‚ö†Ô∏è SCAN TERMIN√â - {len(all_violations)} VIOLATIONS D√âTECT√âES:")
            for violation in all_violations:
                self.logger.warning(f"  - {violation['term']} trouv√© dans {violation.get('file', violation.get('url', 'unknown'))}")
            self.violation_count += 1
        
        # Sauvegarder les r√©sultats
        await self.save_scan_results(scan_results)
        self.last_scan_results = scan_results
        
        return scan_results

    async def save_scan_results(self, results: Dict):
        """
        Sauvegarde les r√©sultats du scan dans la base de donn√©es
        """
        try:
            # Convertir les r√©sultats pour MongoDB
            mongo_results = {
                **results,
                "_id": f"scan_{results['scan_time'].strftime('%Y%m%d_%H%M%S')}",
                "scan_time": results['scan_time']
            }
            
            await self.db.brand_monitoring.insert_one(mongo_results)
            
            # Garder seulement les 100 derniers scans
            old_scans = self.db.brand_monitoring.find().sort("scan_time", -1).skip(100)
            async for old_scan in old_scans:
                await self.db.brand_monitoring.delete_one({"_id": old_scan["_id"]})
                
        except Exception as e:
            self.logger.error(f"Erreur sauvegarde r√©sultats: {str(e)}")

    async def send_alert(self, violations: List[Dict]):
        """
        Envoie une alerte en cas de d√©tection de violations
        """
        try:
            if self.violation_count >= MONITORING_CONFIG["alert_threshold"]:
                alert_message = f"""
üö® ALERTE SURVEILLANCE MARQUE - {datetime.utcnow().strftime('%d/%m/%Y %H:%M:%S')}

{len(violations)} violations d√©tect√©es sur www.josmose.com :

"""
                for violation in violations[:5]:  # Montrer les 5 premi√®res
                    alert_message += f"‚Ä¢ '{violation['term']}' dans {violation.get('file', violation.get('url', 'unknown'))}\n"
                
                if len(violations) > 5:
                    alert_message += f"... et {len(violations) - 5} autres violations\n"
                
                alert_message += "\nüîß Action requise : Nettoyage imm√©diat n√©cessaire !"
                
                # Log l'alerte (dans un vrai syst√®me, on enverrait un email/SMS)
                self.logger.critical(alert_message)
                
                # Sauvegarder l'alerte
                await self.db.brand_monitoring_alerts.insert_one({
                    "timestamp": datetime.utcnow(),
                    "violation_count": len(violations),
                    "consecutive_violations": self.violation_count,
                    "message": alert_message,
                    "violations": violations
                })
                
        except Exception as e:
            self.logger.error(f"Erreur envoi alerte: {str(e)}")

    async def run_monitoring_loop(self):
        """
        Boucle principale de surveillance continue
        """
        self.logger.info("üöÄ D√âMARRAGE AGENT SURVEILLANCE MARQUE JOSMOSE.COM")
        self.logger.info(f"üìÖ Intervalle de v√©rification: {MONITORING_CONFIG['check_interval']} secondes")
        self.logger.info(f"üéØ Termes surveill√©s: {', '.join(FORBIDDEN_TERMS)}")
        
        self.running = True
        
        while self.running:
            try:
                # Effectuer un scan complet
                results = await self.perform_full_scan()
                
                # Envoyer une alerte si n√©cessaire
                if results["violations"]:
                    await self.send_alert(results["violations"])
                
                # Attendre avant le prochain scan
                self.logger.info(f"‚è≥ Prochaine v√©rification dans {MONITORING_CONFIG['check_interval']} secondes...")
                await asyncio.sleep(MONITORING_CONFIG["check_interval"])
                
            except Exception as e:
                self.logger.error(f"Erreur dans la boucle de surveillance: {str(e)}")
                await asyncio.sleep(30)  # Attendre 30s en cas d'erreur

    def stop_monitoring(self):
        """
        Arr√™te l'agent de surveillance
        """
        self.logger.info("üõë ARR√äT AGENT SURVEILLANCE MARQUE")
        self.running = False

    async def get_monitoring_stats(self) -> Dict:
        """
        Retourne les statistiques de surveillance
        """
        try:
            # Statistiques des derniers scans
            recent_scans = await self.db.brand_monitoring.find().sort("scan_time", -1).limit(10).to_list(10)
            
            total_scans = await self.db.brand_monitoring.count_documents({})
            clean_scans = await self.db.brand_monitoring.count_documents({"violations_found": 0})
            
            # Statistiques des alertes
            total_alerts = await self.db.brand_monitoring_alerts.count_documents({})
            
            return {
                "status": "RUNNING" if self.running else "STOPPED",
                "last_scan": self.last_scan_results,
                "total_scans": total_scans,
                "clean_scans": clean_scans,
                "violation_scans": total_scans - clean_scans,
                "total_alerts": total_alerts,
                "recent_scans": recent_scans,
                "current_violation_streak": self.violation_count
            }
            
        except Exception as e:
            self.logger.error(f"Erreur r√©cup√©ration stats: {str(e)}")
            return {"error": str(e)}

# Instance globale de l'agent
brand_monitor = BrandMonitoringAgent()

# Fonctions utilitaires pour l'int√©gration
async def start_brand_monitoring():
    """D√©marre l'agent de surveillance"""
    return await brand_monitor.run_monitoring_loop()

async def stop_brand_monitoring():
    """Arr√™te l'agent de surveillance"""
    brand_monitor.stop_monitoring()

async def get_brand_monitoring_status():
    """R√©cup√®re le statut de surveillance"""
    return await brand_monitor.get_monitoring_stats()

async def force_brand_scan():
    """Force un scan imm√©diat"""
    return await brand_monitor.perform_full_scan()