"""
Service Email Int√©gr√© pour CRM
G√®re l'envoi, la r√©ception et les accus√©s de r√©ception automatiques
"""

import os
import asyncio
import logging
from typing import List, Dict, Optional
from datetime import datetime
import smtplib
import imaplib
import email
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email import encoders
import uuid
from motor.motor_asyncio import AsyncIOMotorClient

# Configuration email (√† configurer selon votre fournisseur)
EMAIL_CONFIG = {
    "smtp_server": os.getenv("SMTP_SERVER", "smtp.gmail.com"),
    "smtp_port": int(os.getenv("SMTP_PORT", "587")),
    "imap_server": os.getenv("IMAP_SERVER", "imap.gmail.com"),
    "imap_port": int(os.getenv("IMAP_PORT", "993")),
    "use_tls": True
}

# Messages d'accus√© de r√©ception personnalis√©s
WELCOME_TEMPLATES = {
    "commercial@josmoze.net": {
        "subject": "üåä Merci pour votre int√©r√™t - Josmose Solutions",
        "message": """
Bonjour,

Merci pour votre message ! Nous avons bien re√ßu votre demande concernant nos solutions d'osmose inverse.

Notre √©quipe commerciale va analyser votre besoin et vous recontacter dans les plus brefs d√©lais (g√©n√©ralement sous 2h en journ√©e).

En attendant, vous pouvez :
‚Ä¢ D√©couvrir nos solutions sur www.josmoze.net
‚Ä¢ Consulter nos cas clients et t√©moignages
‚Ä¢ T√©l√©charger notre catalogue technique

Nous sommes sp√©cialis√©s dans :
‚úì Syst√®mes d'osmose inverse pour particuliers et professionnels
‚úì Installation et maintenance en France
‚úì Support technique d√©di√©
‚úì Garantie 2 ans sur tous nos syst√®mes

√Ä tr√®s bient√¥t,

L'√©quipe commerciale Josmose
üìß commercial@josmoze.net
üìû Service client disponible 9h-18h
üåê www.josmoze.net

---
Ceci est un message automatique. Votre demande a √©t√© enregistr√©e sous la r√©f√©rence #{reference}
        """.strip()
    },
    "support@josmoze.net": {
        "subject": "üîß Support Technique Josmose - Ticket ouvert",
        "message": """
Bonjour,

Votre demande de support technique a √©t√© bien re√ßue et enregistr√©e.

Un technicien sp√©cialis√© va analyser votre probl√®me et vous contacter rapidement pour vous apporter une solution.

Informations importantes :
‚Ä¢ Temps de r√©ponse : sous 4h en journ√©e
‚Ä¢ Support disponible : Lundi-Vendredi 9h-18h
‚Ä¢ Intervention √† domicile possible selon votre r√©gion

Pour acc√©l√©rer le traitement :
üìã Gardez √† port√©e la r√©f√©rence de votre syst√®me
üìß N'h√©sitez pas √† nous envoyer des photos si n√©cessaire
üìû Pour les urgences : contactez-nous directement

Notre √©quipe technique exp√©riment√©e est l√† pour r√©soudre rapidement tous vos probl√®mes d'osmose inverse.

Cordialement,

L'√©quipe support Josmose
üîß support@josmoze.net
üìû Hotline technique 9h-18h
üåê www.josmoze.net/support

---
Ticket de support #{reference} cr√©√© le {date}
        """.strip()
    },
    "default": {
        "subject": "üíß Message re√ßu - Josmose",
        "message": """
Bonjour,

Nous avons bien re√ßu votre message et vous remercions pour votre int√©r√™t pour Josmose.

Un membre de notre √©quipe va prendre connaissance de votre demande et vous recontacter tr√®s rapidement.

En attendant, nous vous invitons √† d√©couvrir :
üåê Notre site web : www.josmoze.net
üìö Nos solutions d'osmose inverse
üíß Nos t√©moignages clients

Merci de votre confiance,

L'√©quipe Josmose
üìß contact@josmoze.net
üåê www.josmoze.net

---
R√©f√©rence de votre message : #{reference}
        """.strip()
    }
}

class EmailService:
    def __init__(self):
        self.mongo_client = AsyncIOMotorClient(os.getenv("MONGO_URL", "mongodb://localhost:27017"))
        self.db = self.mongo_client[os.getenv("DB_NAME", "test_database")]
        self.setup_logging()

    def setup_logging(self):
        """Configure logging pour le service email"""
        logging.basicConfig(level=logging.INFO)
        self.logger = logging.getLogger(__name__)

    async def send_email(self, from_email: str, to_email: str, subject: str, body: str, 
                        attachments: Optional[List[Dict]] = None, email_password: str = None) -> Dict:
        """
        Envoie un email via SMTP
        """
        try:
            # Cr√©er le message
            msg = MIMEMultipart()
            msg['From'] = from_email
            msg['To'] = to_email
            msg['Subject'] = subject

            # Ajouter le corps du message
            msg.attach(MIMEText(body, 'html' if '<' in body else 'plain', 'utf-8'))

            # Ajouter les pi√®ces jointes si pr√©sentes
            if attachments:
                for attachment in attachments:
                    part = MIMEBase('application', 'octet-stream')
                    part.set_payload(attachment['content'])
                    encoders.encode_base64(part)
                    part.add_header(
                        'Content-Disposition',
                        f"attachment; filename= {attachment['filename']}"
                    )
                    msg.attach(part)

            # Envoyer l'email
            server = smtplib.SMTP(EMAIL_CONFIG["smtp_server"], EMAIL_CONFIG["smtp_port"])
            server.starttls()
            server.login(from_email, email_password)
            
            text = msg.as_string()
            server.sendmail(from_email, to_email, text)
            server.quit()

            # Enregistrer l'email envoy√© dans la base
            email_record = {
                "id": str(uuid.uuid4()),
                "type": "sent",
                "from_email": from_email,
                "to_email": to_email,
                "subject": subject,
                "body": body,
                "sent_at": datetime.utcnow(),
                "status": "sent",
                "read": False,
                "attachments": attachments or []
            }
            
            await self.db.emails.insert_one(email_record)
            
            self.logger.info(f"Email envoy√© avec succ√®s de {from_email} vers {to_email}")
            
            return {"success": True, "message": "Email envoy√©", "email_id": email_record["id"]}
            
        except Exception as e:
            self.logger.error(f"Erreur envoi email: {str(e)}")
            return {"success": False, "error": str(e)}

    async def send_auto_reply(self, to_email: str, sender_email: str, original_subject: str) -> Dict:
        """
        Envoie un accus√© de r√©ception automatique
        """
        try:
            # D√©terminer le template bas√© sur l'email de destination
            template = WELCOME_TEMPLATES.get(sender_email, WELCOME_TEMPLATES["default"])
            
            # G√©n√©rer une r√©f√©rence unique
            reference = str(uuid.uuid4())[:8].upper()
            
            # Personnaliser le message
            subject = template["subject"]
            body = template["message"].replace("{reference}", reference)
            body = body.replace("{date}", datetime.utcnow().strftime("%d/%m/%Y √† %H:%M"))
            
            # Note: Dans un vrai syst√®me, vous utiliseriez les vrais mots de passe email
            # Pour la d√©mo, on simule l'envoi
            
            # Enregistrer l'accus√© de r√©ception
            auto_reply_record = {
                "id": str(uuid.uuid4()),
                "type": "auto_reply",
                "from_email": sender_email,
                "to_email": to_email,
                "subject": subject,
                "body": body,
                "sent_at": datetime.utcnow(),
                "status": "sent",
                "reference": reference,
                "original_subject": original_subject,
                "read": False
            }
            
            await self.db.emails.insert_one(auto_reply_record)
            
            self.logger.info(f"Accus√© de r√©ception automatique envoy√© √† {to_email} (ref: {reference})")
            
            return {
                "success": True, 
                "message": "Accus√© de r√©ception envoy√©", 
                "reference": reference,
                "email_id": auto_reply_record["id"]
            }
            
        except Exception as e:
            self.logger.error(f"Erreur accus√© de r√©ception: {str(e)}")
            return {"success": False, "error": str(e)}

    async def receive_emails(self, email_address: str, email_password: str) -> List[Dict]:
        """
        R√©cup√®re les emails re√ßus via IMAP (simulation pour la d√©mo)
        """
        try:
            # Dans un vrai syst√®me, vous utiliseriez IMAP
            # Pour la d√©mo, on retourne des emails simul√©s
            
            # R√©cup√©rer les emails de la base de donn√©es
            emails_cursor = self.db.emails.find({
                "$or": [
                    {"to_email": email_address},
                    {"from_email": email_address}
                ]
            }).sort("sent_at", -1).limit(50)
            
            emails = await emails_cursor.to_list(length=50)
            
            # Convertir ObjectId en string pour JSON
            for email_doc in emails:
                email_doc["_id"] = str(email_doc["_id"])
            
            return emails
            
        except Exception as e:
            self.logger.error(f"Erreur r√©ception emails: {str(e)}")
            return []

    async def mark_email_as_read(self, email_id: str) -> Dict:
        """
        Marque un email comme lu
        """
        try:
            result = await self.db.emails.update_one(
                {"id": email_id},
                {"$set": {"read": True, "read_at": datetime.utcnow()}}
            )
            
            if result.modified_count > 0:
                return {"success": True, "message": "Email marqu√© comme lu"}
            else:
                return {"success": False, "error": "Email non trouv√©"}
                
        except Exception as e:
            self.logger.error(f"Erreur marquage email: {str(e)}")
            return {"success": False, "error": str(e)}

    async def get_inbox_stats(self, email_address: str) -> Dict:
        """
        Retourne les statistiques de la bo√Æte mail
        """
        try:
            # Compter les emails
            total_emails = await self.db.emails.count_documents({
                "$or": [{"to_email": email_address}, {"from_email": email_address}]
            })
            
            unread_emails = await self.db.emails.count_documents({
                "to_email": email_address,
                "read": False
            })
            
            sent_emails = await self.db.emails.count_documents({
                "from_email": email_address
            })
            
            received_emails = await self.db.emails.count_documents({
                "to_email": email_address
            })
            
            return {
                "total": total_emails,
                "unread": unread_emails,
                "sent": sent_emails,
                "received": received_emails
            }
            
        except Exception as e:
            self.logger.error(f"Erreur stats inbox: {str(e)}")
            return {"total": 0, "unread": 0, "sent": 0, "received": 0}

    async def simulate_incoming_email(self, to_email: str, from_email: str, subject: str, body: str) -> Dict:
        """
        Simule la r√©ception d'un email (pour d√©mo)
        """
        try:
            # Cr√©er un email entrant simul√©
            incoming_email = {
                "id": str(uuid.uuid4()),
                "type": "received",
                "from_email": from_email,
                "to_email": to_email,
                "subject": subject,
                "body": body,
                "received_at": datetime.utcnow(),
                "status": "received",
                "read": False
            }
            
            await self.db.emails.insert_one(incoming_email)
            
            # Envoyer automatiquement un accus√© de r√©ception
            auto_reply = await self.send_auto_reply(from_email, to_email, subject)
            
            self.logger.info(f"Email entrant simul√©: {from_email} -> {to_email}")
            
            return {
                "success": True,
                "message": "Email re√ßu",
                "email_id": incoming_email["id"],
                "auto_reply": auto_reply
            }
            
        except Exception as e:
            self.logger.error(f"Erreur simulation email: {str(e)}")
            return {"success": False, "error": str(e)}

# Instance globale du service email
email_service = EmailService()