#!/usr/bin/env python3
"""
ü§ñ SYST√àME CONVERSATIONNEL OSMOSE AVANC√â
===========================================
Agents IA vraiment interactifs avec conversations naturelles
- SMS bidirectionnels intelligents
- IA conversationnelle avec m√©moire
- Strat√©gies commerciales adaptatives
"""

import openai
from openai import OpenAI
from twilio.rest import Client
import os
import json
from datetime import datetime, timedelta
from typing import Dict, List, Optional
import asyncio

# Configuration
client = OpenAI(api_key="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")
TWILIO_ACCOUNT_SID = "AC5d37fc46401a27a84540203820d680ca"
TWILIO_AUTH_TOKEN = "ead5696cac732121a4f448942845517c"
TWILIO_PHONE_NUMBER = "+16592518805"
JOSMOSE_WEBSITE = "https://www.josmose.com"  # URL officielle du site

class ConversationalAgent:
    def __init__(self, name: str, role: str, personality: str):
        self.name = name
        self.role = role 
        self.personality = personality
        self.twilio_client = Client(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN)
        self.conversation_memory = {}  # Stockage des conversations
        
    def get_conversation_context(self, client_phone: str) -> str:
        """R√©cup√®re le contexte de conversation pr√©c√©dent"""
        if client_phone in self.conversation_memory:
            history = self.conversation_memory[client_phone]
            # Formatage de l'historique pour l'IA
            context = "Historique conversation pr√©c√©dente:\n"
            for msg in history[-5:]:  # Derniers 5 messages
                timestamp = msg.get('timestamp', 'Inconnu')
                sender = msg.get('sender', 'Inconnu')
                text = msg.get('text', '')
                context += f"[{timestamp}] {sender}: {text}\n"
            return context
        return "Premi√®re conversation avec ce client."
    
    def save_message(self, client_phone: str, sender: str, message: str):
        """Sauvegarde un message dans l'historique"""
        if client_phone not in self.conversation_memory:
            self.conversation_memory[client_phone] = []
        
        self.conversation_memory[client_phone].append({
            'timestamp': datetime.now().strftime("%H:%M:%S"),
            'sender': sender,
            'text': message
        })
        
        # Limiter √† 20 messages max par conversation
        if len(self.conversation_memory[client_phone]) > 20:
            self.conversation_memory[client_phone] = self.conversation_memory[client_phone][-20:]
    
    async def generate_intelligent_response(self, client_message: str, client_phone: str, client_name: str = "Client") -> str:
        """G√©n√®re une r√©ponse SMS ultra-optimis√©e avec intelligence conversationnelle maximale"""
        
        # Contexte de conversation
        conversation_context = self.get_conversation_context(client_phone)
        
        # Analyse pouss√©e des intentions client
        message_lower = client_message.lower()
        
        # Cat√©gories d'intentions avec mots-cl√©s √©tendus
        intentions = {
            "prix_tarif": ["prix", "co√ªt", "tarif", "combien", "‚Ç¨", "euros", "cher", "budget", "co√ªte"],
            "info_produit": ["info", "information", "produit", "catalogue", "voir", "montre", "d√©tails", "caract√©ristiques"],
            "achat_commande": ["acheter", "commander", "commande", "veux", "voudrais", "prendre", "int√©ress√©"],
            "comparaison": ["comparai", "diff√©rence", "mieux", "quel", "lequel", "choisir", "conseil"],
            "technique": ["technique", "fonctionne", "installation", "entretien", "filtre", "garantie"],
            "urgence": ["urgent", "rapidement", "vite", "imm√©diat", "maintenant", "aujourd'hui"],
            "h√©sitation": ["h√©site", "r√©fl√©chis", "pas s√ªr", "doute", "peut-√™tre", "voir"],
            "positif": ["oui", "ok", "d'accord", "int√©resse", "parfait", "bien", "merci"],
            "n√©gatif": ["non", "pas int√©ress√©", "cher", "plus tard", "r√©fl√©chir"]
        }
        
        # D√©tection de l'intention principale
        detected_intention = "general"
        max_score = 0
        for intention, keywords in intentions.items():
            score = sum(1 for keyword in keywords if keyword in message_lower)
            if score > max_score:
                max_score = score
                detected_intention = intention
        
        # G√©n√©ration du prompt ultra-personnalis√© selon l'agent ET l'intention
        prompt_templates = {
            "Thomas": {
                "prix_tarif": f"Client demande les prix. Donne fourchette rapide (199‚Ç¨-599‚Ç¨) + lien {JOSMOSE_WEBSITE} pour devis personnalis√© + question qualifiante sur besoins.",
                "info_produit": f"Client veut des infos produits. Donne 2-3 avantages cl√©s + lien {JOSMOSE_WEBSITE} pour catalogue + question sur usage pr√©vu.",
                "achat_commande": f"Client veut acheter. F√©licite + guide vers {JOSMOSE_WEBSITE} pour choisir + question sur priorit√©s (sant√©/go√ªt/√©conomie).",
                "comparaison": f"Client compare. Donne notre diff√©renciation unique + lien {JOSMOSE_WEBSITE} + question sur crit√®res importants.",
                "technique": f"Client question technique. Donne r√©ponse experte concise + lien {JOSMOSE_WEBSITE} pour d√©tails + propose √©change t√©l√©phonique.",
                "h√©sitation": f"Client h√©site. Empathie + rassurance + petit b√©n√©fice concret + lien {JOSMOSE_WEBSITE} + question ouverte.",
                "positif": f"Client positif. Enthousiasme + prochaine √©tape concr√®te + lien {JOSMOSE_WEBSITE} + question progression.",
                "g√©n√©ral": f"R√©ponse empathique + question qualifiante + lien {JOSMOSE_WEBSITE} si appropri√©."
            },
            
            "Sophie": {
                "prix_tarif": f"Client demande prix. Fourchette + valeur/prix + lien {JOSMOSE_WEBSITE} pour configurateur + ROI/√©conomies.",
                "info_produit": f"Client infos. 3 b√©n√©fices commerciaux + lien {JOSMOSE_WEBSITE} + question besoin urgent/pr√©vu.",
                "achat_commande": f"Client acheter. Closing doux + guide {JOSMOSE_WEBSITE} + urgence douce (stock/promo) + facilitation.",
                "comparaison": f"Client compare. Avantages concurrentiels + preuve sociale + lien {JOSMOSE_WEBSITE} + question d√©cision.",
                "h√©sitation": f"Client h√©site. Objection handling + rassurance + petit plus + lien {JOSMOSE_WEBSITE} + closing alternatif.",
                "positif": f"Client positif. Momentum + action imm√©diate + lien {JOSMOSE_WEBSITE} + facilitation achat.",
                "n√©gatif": f"Client n√©gatif. Empathie + reframe + b√©n√©fice inattendu + lien {JOSMOSE_WEBSITE} + porte ouverte.",
                "g√©n√©ral": f"Approche consultative + qualification besoin + lien {JOSMOSE_WEBSITE} + question closing."
            },
            
            "Marie": {
                "prix_tarif": f"Client prix. Transparence + options financement + lien {JOSMOSE_WEBSITE} pour simulateur + accompagnement.",
                "info_produit": f"Client infos. Service personnalis√© + lien {JOSMOSE_WEBSITE} + proposition accompagnement choix.",
                "achat_commande": f"Client commande. Accompagnement complet + lien {JOSMOSE_WEBSITE} + rassurance SAV.",
                "technique": f"Client technique. Expertise + lien {JOSMOSE_WEBSITE} pour guides + support personnalis√©.",
                "h√©sitation": f"Client h√©site. √âcoute + compr√©hension + solutions personnalis√©es + lien {JOSMOSE_WEBSITE}.",
                "g√©n√©ral": f"Approche relationnelle + √©coute + lien {JOSMOSE_WEBSITE} + proposition d'aide."
            },
            
            "Julien": {
                "prix_tarif": f"Client prix. Prix juste + √©conomies long terme + lien {JOSMOSE_WEBSITE} + urgence stock/promo.",
                "achat_commande": f"Client commande. F√©licitations + facilitation maximum + lien {JOSMOSE_WEBSITE} + bonus/urgence.",
                "h√©sitation": f"Client h√©site. Lev√©e objections + offre sp√©ciale + lien {JOSMOSE_WEBSITE} + scarcit√©.",
                "n√©gatif": f"Client n√©gatif. Derni√®re chance + offre exceptionnelle + lien {JOSMOSE_WEBSITE} + urgence.",
                "g√©n√©ral": f"R√©cup√©ration + motivation + lien {JOSMOSE_WEBSITE} + incitation action."
            },
            
            "Caroline": {
                "technique": f"Client technique. Donn√©es pr√©cises + √©tudes/tests + lien {JOSMOSE_WEBSITE} pour documentation + expertise.",
                "comparaison": f"Client compare. Analyses objectives + tableaux comparatifs + lien {JOSMOSE_WEBSITE} + recommandation data-driven.",
                "info_produit": f"Client infos. Sp√©cifications d√©taill√©es + performances + lien {JOSMOSE_WEBSITE} + tests personnalis√©s.",
                "g√©n√©ral": f"Approche analytique + donn√©es concr√®tes + lien {JOSMOSE_WEBSITE} + insights personnalis√©s."
            }
        }
        
        # S√©lection du template appropri√©
        agent_templates = prompt_templates.get(self.name, prompt_templates["Thomas"])
        template = agent_templates.get(detected_intention, agent_templates.get("g√©n√©ral", ""))
        
        # Construction du prompt ultra-optimis√©
        base_directive = f"""
        Tu es {self.name}, {self.role} chez Josmose (purificateurs d'eau).
        Personnalit√©: {self.personality}
        
        CLIENT: {client_name}
        INTENTION D√âTECT√âE: {detected_intention}
        MESSAGE CLIENT: "{client_message}"
        
        CONTEXT PR√âC√âDENT:
        {conversation_context}
        
        DIRECTIVE SP√âCIALIS√âE:
        {template}
        
        R√àGLES SMS ULTRA-OPTIMALES:
        1. Maximum 160 caract√®res (limite SMS standard)
        2. Ton personnalis√© selon ton r√¥le
        3. TOUJOURS inclure lien {JOSMOSE_WEBSITE} si appropri√© √† l'intention
        4. Question engageante pour continuer conversation
        5. Action concr√®te sugg√©r√©e
        6. Urgence douce si appropri√©
        7. Personnalisation avec nom client
        8. √âviter r√©p√©titions avec historique
        9. Utiliser √©mojis avec parcimonie (maximum 1-2)
        10. Appel √† l'action clair et direct
        
        G√©n√®re la r√©ponse SMS PARFAITE pour cette intention et ce contexte.
        """
        
        try:
            response = client.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": base_directive},
                    {"role": "user", "content": f"G√©n√®re le SMS parfait pour {client_name}"}
                ],
                max_tokens=100,  # Augment√© pour messages plus complets mais dans la limite SMS
                temperature=0.7  # R√©duit pour plus de coh√©rence
            )
            
            intelligent_response = response.choices[0].message.content.strip()
            
            # Post-traitement pour optimisation finale
            # D√©finir les intentions critiques
            critical_intentions = ["prix_tarif", "info_produit", "achat_commande", "comparaison", "technique"]
            
            # Forcer respect limite 160 caract√®res SMS
            if len(intelligent_response) > 160:
                # Compresser automatiquement
                parts = intelligent_response.split(' ')
                compressed = ""
                for part in parts:
                    if len(compressed + " " + part) <= 155:  # 5 chars de marge
                        compressed = compressed + " " + part if compressed else part
                    else:
                        break
                # S'assurer qu'on a l'URL si critique
                if JOSMOSE_WEBSITE not in compressed and detected_intention in critical_intentions:
                    # Sacrifier du texte pour garder l'URL
                    url_space = len(JOSMOSE_WEBSITE) + 1
                    available_space = 155 - url_space
                    if available_space > 20:  # Minimum viable
                        text_part = intelligent_response[:available_space].rsplit(' ', 1)[0]
                        intelligent_response = f"{text_part} {JOSMOSE_WEBSITE}"
                    else:
                        intelligent_response = compressed
                else:
                    intelligent_response = compressed
                    
            # Forcer inclusion lien si intention critique et pas pr√©sent
            if detected_intention in critical_intentions and JOSMOSE_WEBSITE not in intelligent_response:
                if len(intelligent_response) < 120:  # Assez de place
                    intelligent_response += f" {JOSMOSE_WEBSITE}"
                else:
                    # Compresser pour faire de la place
                    available = 155 - len(JOSMOSE_WEBSITE)
                    text_part = intelligent_response[:available].rsplit(' ', 1)[0]
                    intelligent_response = f"{text_part} {JOSMOSE_WEBSITE}"
            
            # Sauvegarder conversation avec m√©tadonn√©es
            self.save_message(client_phone, f"Client ({client_name})", client_message)
            self.save_message(client_phone, f"{self.name} [{detected_intention}]", intelligent_response)
            
            return intelligent_response
            
        except Exception as e:
            print(f"‚ùå Erreur IA: {str(e)}")
            
            # R√©ponses de secours ultra-optimis√©es par intention
            emergency_responses = {
                "prix_tarif": f"{client_name}, nos purificateurs 199-599‚Ç¨ selon besoins. Devis: {JOSMOSE_WEBSITE} Votre budget ?",
                "info_produit": f"{client_name}, d√©couvrez notre gamme: {JOSMOSE_WEBSITE} Quelle eau purifiez-vous ?",
                "achat_commande": f"Parfait {client_name} ! Choisissez votre mod√®le: {JOSMOSE_WEBSITE} Installation quand ?",
                "h√©sitation": f"Je comprends {client_name}. Essai gratuit 30j: {JOSMOSE_WEBSITE} Questions ?",
                "g√©n√©ral": f"Merci {client_name} ! Toutes nos solutions: {JOSMOSE_WEBSITE} Puis-je vous aider ?"
            }
            
            return emergency_responses.get(detected_intention, f"Merci {client_name} ! Infos: {JOSMOSE_WEBSITE}")
    
    async def send_intelligent_sms(self, to_number: str, client_message: str, client_name: str = "Client") -> bool:
        """Envoie une r√©ponse SMS intelligente"""
        try:
            # G√©n√©ration r√©ponse IA
            response = await self.generate_intelligent_response(client_message, to_number, client_name)
            
            # Envoi SMS propre (sans pr√©fixe)
            sms = self.twilio_client.messages.create(
                body=response,
                from_=TWILIO_PHONE_NUMBER,
                to=to_number
            )
            
            print(f"‚úÖ {self.name} ‚Üí SMS intelligent: {response}")
            print(f"üìã SID: {sms.sid}")
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur envoi SMS: {str(e)}")
            return False

# Agents conversationnels pr√©-configur√©s
conversational_agents = {
    "thomas": ConversationalAgent(
        name="Thomas",
        role="conseiller expert en qualit√© de l'eau",
        personality="Empathique, curieux, poseur de bonnes questions, jamais insistant"
    ),
    
    "sophie": ConversationalAgent(
        name="Sophie", 
        role="experte en vente consultative",
        personality="Professionnelle, persuasive, gestion fine des objections, adaptable"
    ),
    
    "marie": ConversationalAgent(
        name="Marie",
        role="sp√©cialiste relation client",
        personality="Chaleureuse, empathique, solutionniste, fid√©lisatrice"
    ),
    
    "julien": ConversationalAgent(
        name="Julien", 
        role="expert en r√©cup√©ration commerciale",
        personality="Bienveillant, cr√©ateur d'urgence douce, facilitateur de d√©cisions"
    ),
    
    "caroline": ConversationalAgent(
        name="Caroline",
        role="analyste performance et conseils techniques", 
        personality="Analytique, p√©dagogue, apporteuse de valeur, bas√©e donn√©es"
    )
}

def detect_appropriate_agent(message: str) -> str:
    """D√©tecte l'agent le plus appropri√© selon le message"""
    
    message_lower = message.lower()
    
    # Mots-cl√©s pour chaque agent
    keywords = {
        "thomas": ["info", "question", "qualit√©", "eau", "conseil", "aide", "bonjour", "comment"],
        "sophie": ["prix", "achat", "commander", "int√©ress√©", "closing", "vendre", "co√ªt", "tarif"],
        "marie": ["probl√®me", "service", "support", "aide", "r√©clamation", "assistance", "merci"],
        "julien": ["panier", "commande", "abandonn√©", "h√©sit√©", "r√©fl√©chir", "d√©cision", "h√©sitation"],
        "caroline": ["analyse", "donn√©e", "statistique", "technique", "comparaison", "√©tude", "test"]
    }
    
    # Score par agent
    scores = {}
    for agent, words in keywords.items():
        scores[agent] = sum(1 for word in words if word in message_lower)
    
    # Agent avec le meilleur score
    best_agent = max(scores.items(), key=lambda x: x[1])
    
    # Si aucun match, Thomas par d√©faut
    return best_agent[0] if best_agent[1] > 0 else "thomas"

async def test_conversational_system():
    """Test du syst√®me conversationnel complet"""
    
    print("ü§ñ TEST SYST√àME CONVERSATIONNEL AVANC√â")
    print("=" * 50)
    
    client_phone = "+15068893760"  
    client_name = "Monsieur Dubois"
    
    # Simulation conversation progressive
    conversations = [
        ("Bonjour, je voudrais des infos sur vos purificateurs", "thomas"),
        ("Combien √ßa co√ªte exactement ?", "sophie"), 
        ("Est-ce que c'est vraiment efficace contre le calcaire ?", "caroline"),
        ("J'h√©site encore... c'est cher quand m√™me", "julien")
    ]
    
    print(f"üß™ Test conversation intelligente avec {client_name}")
    
    for i, (message, preferred_agent) in enumerate(conversations, 1):
        print(f"\n--- √âchange {i} ---")
        print(f"üë§ {client_name}: {message}")
        
        # D√©tection automatique ou agent pr√©f√©r√©
        agent_name = preferred_agent
        agent = conversational_agents[agent_name]
        
        print(f"ü§ñ Agent s√©lectionn√©: {agent.name}")
        
        # R√©ponse intelligente
        success = await agent.send_intelligent_sms(client_phone, message, client_name)
        
        if success:
            print(f"‚úÖ SMS intelligent envoy√©")
        else:
            print(f"‚ùå √âchec envoi")
        
        # Pause r√©aliste entre messages
        await asyncio.sleep(3)
    
    # Afficher l'historique de conversation de Thomas (premier agent)
    thomas = conversational_agents["thomas"]
    print(f"\nüìã HISTORIQUE CONVERSATION THOMAS:")
    if client_phone in thomas.conversation_memory:
        for msg in thomas.conversation_memory[client_phone]:
            print(f"[{msg['timestamp']}] {msg['sender']}: {msg['text']}")
    
    print(f"\nüåä Test termin√© ! V√©rifiez vos SMS sur {client_phone}")

async def simulate_client_response(agent_name: str, client_message: str):
    """Simule une r√©ponse client sp√©cifique √† un agent"""
    
    client_phone = "+15068893760"  
    client_name = "Monsieur Dubois"
    
    agent = conversational_agents.get(agent_name, conversational_agents["thomas"])
    
    print(f"\nüß™ TEST R√âPONSE SP√âCIFIQUE - Agent: {agent.name}")
    print(f"üë§ Message client: {client_message}")
    
    success = await agent.send_intelligent_sms(client_phone, client_message, client_name)
    
    if success:
        print(f"‚úÖ R√©ponse intelligente envoy√©e par {agent.name}")
    else:
        print(f"‚ùå √âchec")

if __name__ == "__main__":
    # Test du syst√®me complet
    asyncio.run(test_conversational_system())
    
    # Tests sp√©cifiques suppl√©mentaires
    # asyncio.run(simulate_client_response("sophie", "Votre prix de 1500‚Ç¨ est trop √©lev√©"))
    # asyncio.run(simulate_client_response("marie", "J'ai un probl√®me avec ma commande"))