#!/usr/bin/env python3
"""
üåä TEST OSMOSE LIVE - Agents IA avec APIs R√©elles
================================================
Test complet du syst√®me OSMOSE avec vraies APIs Twilio et OpenAI
Num√©ro de test : +15068893760

Usage: python3 test_osmose_live.py
"""

import openai
from twilio.rest import Client
import os
from datetime import datetime
import asyncio
import json

# Configuration depuis .env
openai.api_key = os.environ.get('OPENAI_API_KEY')
TWILIO_ACCOUNT_SID = os.environ.get('TWILIO_ACCOUNT_SID')
TWILIO_AUTH_TOKEN = os.environ.get('TWILIO_AUTH_TOKEN')
TWILIO_PHONE_NUMBER = os.environ.get('TWILIO_PHONE_NUMBER')
TEST_CLIENT_NUMBER = os.environ.get('TEST_CLIENT_NUMBER')
TEST_CLIENT_NAME = os.environ.get('TEST_CLIENT_NAME', "Client Test")

class OSMOSEAgentTester:
    def __init__(self):
        self.twilio_client = Client(TWILIO_ACCOUNT_SID, TWILIO_AUTH_TOKEN)
        self.results = []
        
    def log_result(self, agent, action, success, message, details=""):
        """Logger les r√©sultats des tests"""
        result = {
            "timestamp": datetime.now().strftime("%H:%M:%S"),
            "agent": agent,
            "action": action,
            "success": success,
            "message": message,
            "details": details
        }
        self.results.append(result)
        status = "‚úÖ" if success else "‚ùå"
        print(f"{status} {agent} {action}: {message}")
        if details:
            print(f"   üìã {details}")

    def generate_agent_message(self, agent_name, client_info, message_type="sms"):
        """G√©n√®re un message personnalis√© avec OpenAI selon l'agent"""
        
        agent_prompts = {
            "socrate": f"""
            Tu es Socrate üß†, agent de prospection philosophique pour purificateurs d'eau.
            
            Client: {client_info['name']} 
            Contexte: Premier contact - prospection intelligente
            
            Utilise la m√©thode socratique avec des questions qui am√®nent le client √† r√©fl√©chir.
            Message {message_type.upper()} de maximum 160 caract√®res.
            Ton empathique, curieux, jamais agressif.
            
            Cr√©√© un message de prospection qui pose une question int√©ressante sur l'eau.
            """,
            
            "aristote": f"""
            Tu es Aristote üìû, agent d'appels commerciaux avec logique parfaite.
            
            Client: {client_info['name']}
            Contexte: Appel commercial - qualification et closing
            
            Structure ton discours en 3 points logiques comme un syllogisme.
            Pour un appel vocal, message de 30-45 secondes maximum.
            Professionnel, persuasif mais respectueux.
            
            Cr√©√© un discours d'appel qui pr√©sente 3 b√©n√©fices clairs des purificateurs d'eau.
            """,
            
            "ciceron": f"""
            Tu es Cic√©ron üí¨, ma√Ætre de l'empathie par SMS.
            
            Client: {client_info['name']}
            Contexte: Suivi relationnel par SMS
            
            Message court, chaleureux, avec emojis appropri√©s.
            Maximum 160 caract√®res pour SMS.
            Cr√©e une connexion √©motionnelle.
            
            Cr√©√© un SMS de suivi qui montre de l'int√©r√™t pour le bien-√™tre du client.
            """,
            
            "demosthene": f"""
            Tu es D√©mosth√®ne üõí, expert r√©cup√©ration paniers abandonn√©s.
            
            Client: {client_info['name']}
            Contexte: Panier abandonn√© - urgence douce
            
            Cr√©e une urgence sans pression aggressive.
            Message qui r√©veille l'int√©r√™t sans forcer.
            Maximum 160 caract√®res pour SMS.
            
            Cr√©√© un message qui donne envie de finaliser l'achat abandonn√©.
            """,
            
            "platon": f"""
            Tu es Platon üìä, analyste strat√©gique.
            
            Client: {client_info['name']}
            Contexte: Insights et recommandations
            
            Message analytique avec des donn√©es int√©ressantes.
            Pr√©sente des statistiques ou insights utiles.
            Maximum 160 caract√®res.
            
            Cr√©√© un message avec un insight sur la qualit√© de l'eau qui interpelle.
            """
        }
        
        try:
            response = openai.chat.completions.create(
                model="gpt-4o-mini",
                messages=[
                    {"role": "system", "content": "Tu es un expert en communication commerciale √©thique et empathique."},
                    {"role": "user", "content": agent_prompts[agent_name]}
                ],
                max_tokens=150,
                temperature=0.7
            )
            
            message = response.choices[0].message.content.strip()
            return message
            
        except Exception as e:
            return f"Message de {agent_name} (Erreur IA: {str(e)})"

    def send_sms_test(self, agent_name, message):
        """Envoie un SMS de test"""
        try:
            sms = self.twilio_client.messages.create(
                body=f"[TEST OSMOSE - {agent_name.upper()}] {message}",
                from_=TWILIO_PHONE_NUMBER,
                to=TEST_CLIENT_NUMBER
            )
            
            self.log_result(
                agent=f"{agent_name} üí¨", 
                action="SMS",
                success=True,
                message="SMS envoy√© avec succ√®s",
                details=f"SID: {sms.sid}, Longueur: {len(message)} caract√®res"
            )
            return True
            
        except Exception as e:
            self.log_result(
                agent=f"{agent_name} üí¨",
                action="SMS", 
                success=False,
                message="Erreur envoi SMS",
                details=str(e)
            )
            return False

    def make_call_test(self, agent_name, message):
        """Effectue un appel de test avec synth√®se vocale"""
        try:
            # TwiML pour synth√®se vocale fran√ßaise
            twiml_content = f"""
            <Response>
                <Say voice="Polly.Celine" language="fr-FR">
                    Bonjour, c'est {agent_name} du syst√®me OSMOSE. 
                    {message}
                    Ceci √©tait un test du syst√®me d'agents IA. 
                    Merci de votre attention. Au revoir.
                </Say>
            </Response>
            """
            
            call = self.twilio_client.calls.create(
                twiml=twiml_content,
                to=TEST_CLIENT_NUMBER,
                from_=TWILIO_PHONE_NUMBER,
                record=False  # Pas d'enregistrement pour les tests
            )
            
            self.log_result(
                agent=f"{agent_name} üìû",
                action="APPEL",
                success=True,
                message="Appel lanc√© avec succ√®s",
                details=f"Call SID: {call.sid}, Dur√©e estim√©e: 30s"
            )
            return True
            
        except Exception as e:
            self.log_result(
                agent=f"{agent_name} üìû",
                action="APPEL",
                success=False,
                message="Erreur appel",
                details=str(e)
            )
            return False

    def test_openai_connection(self):
        """Teste la connexion OpenAI"""
        try:
            response = openai.chat.completions.create(
                model="gpt-4o-mini",
                messages=[{"role": "user", "content": "Test OSMOSE : dis juste 'Connexion OpenAI r√©ussie!'"}],
                max_tokens=10
            )
            
            message = response.choices[0].message.content.strip()
            self.log_result("SYST√àME", "OpenAI", True, message)
            return True
            
        except Exception as e:
            self.log_result("SYST√àME", "OpenAI", False, f"Erreur: {str(e)}")
            return False

    def test_twilio_connection(self):
        """Teste la connexion Twilio"""
        try:
            # R√©cup√©rer les infos du compte
            account = self.twilio_client.api.accounts(TWILIO_ACCOUNT_SID).fetch()
            
            self.log_result(
                "SYST√àME", "Twilio", True, 
                f"Connexion r√©ussie - Compte: {account.friendly_name}",
                f"Statut: {account.status}, Num√©ro: {TWILIO_PHONE_NUMBER}"
            )
            return True
            
        except Exception as e:
            self.log_result("SYST√àME", "Twilio", False, f"Erreur: {str(e)}")
            return False

    async def run_complete_test(self):
        """Lance le test complet du syst√®me OSMOSE"""
        print("üåä" * 50)
        print("üåä" + " " * 16 + "TEST OSMOSE LIVE COMPLET" + " " * 16 + "üåä")
        print("üåä" + " " * 12 + "Agents IA avec APIs R√©elles" + " " * 12 + "üåä") 
        print("üåä" * 50)
        print()
        
        print(f"üì± Num√©ro de test: {TEST_CLIENT_NUMBER}")
        print(f"üìû Num√©ro Twilio: {TWILIO_PHONE_NUMBER}")
        print(f"üë§ Client test: {TEST_CLIENT_NAME}")
        print()
        
        # Test des connexions
        print("üîç TESTS DE CONNEXION:")
        openai_ok = self.test_openai_connection()
        twilio_ok = self.test_twilio_connection()
        
        if not openai_ok or not twilio_ok:
            print("\n‚ùå √âCHEC DES TESTS DE CONNEXION - ARR√äT")
            return False
        
        print("\nü§ñ TESTS DES AGENTS IA:")
        
        client_info = {
            "name": TEST_CLIENT_NAME,
            "phone": TEST_CLIENT_NUMBER,
            "personality": "ANALYTIQUE"  # Pour le test
        }
        
        agents_to_test = [
            ("socrate", "üß†", "sms"),
            ("ciceron", "üí¨", "sms"), 
            ("demosthene", "üõí", "sms"),
            ("aristote", "üìû", "call")  # Appel en dernier
        ]
        
        # Tests SMS d'abord
        for agent_name, emoji, action_type in agents_to_test:
            print(f"\n--- Test {agent_name.upper()} {emoji} ---")
            
            # G√©n√©ration du message IA
            message = self.generate_agent_message(agent_name, client_info, action_type)
            print(f"üí≠ Message g√©n√©r√©: {message}")
            
            # Envoi selon le type
            if action_type == "sms":
                success = self.send_sms_test(agent_name, message)
            elif action_type == "call":
                success = self.make_call_test(agent_name, message)
            
            # Pause entre les tests
            if success:
                await asyncio.sleep(3)  # 3 secondes entre chaque test
        
        # Test final Platon (Analytics)
        print(f"\n--- Test PLATON üìä (Analytics) ---")
        platon_insights = self.generate_agent_message("platon", client_info, "sms")
        print(f"üí≠ Insights g√©n√©r√©s: {platon_insights}")
        self.send_sms_test("platon", platon_insights)
        
        # R√©sum√© final
        print("\n" + "üåä" * 50)
        print("üåä" + " " * 18 + "R√âSUM√â DES TESTS" + " " * 18 + "üåä")
        print("üåä" * 50)
        
        total_tests = len(self.results)
        success_tests = len([r for r in self.results if r["success"]])
        
        print(f"üìä Total tests: {total_tests}")
        print(f"‚úÖ R√©ussis: {success_tests}")
        print(f"‚ùå √âchecs: {total_tests - success_tests}")
        print(f"üìà Taux de r√©ussite: {(success_tests/total_tests)*100:.1f}%")
        
        print(f"\nüì± V√©rifiez votre t√©l√©phone {TEST_CLIENT_NUMBER}")
        print("   Vous devriez avoir re√ßu:")
        print("   üì® 4-5 SMS des diff√©rents agents")
        print("   üìû 1 appel d'Aristote avec discours commercial")
        
        return True

# Point d'entr√©e
async def main():
    """Fonction principale"""
    
    # V√©rification des variables d'environnement
    required_vars = [
        'OPENAI_API_KEY', 'TWILIO_ACCOUNT_SID', 
        'TWILIO_AUTH_TOKEN', 'TWILIO_PHONE_NUMBER', 'TEST_CLIENT_NUMBER'
    ]
    
    missing_vars = [var for var in required_vars if not os.environ.get(var)]
    
    if missing_vars:
        print(f"‚ùå Variables manquantes: {', '.join(missing_vars)}")
        print("V√©rifiez le fichier backend/.env")
        return False
    
    # Lancement des tests
    tester = OSMOSEAgentTester()
    await tester.run_complete_test()
    
    return True

if __name__ == "__main__":
    asyncio.run(main())