#!/usr/bin/env python3
"""
üåä SYST√àME OSMOSE - G√©n√©rateur Portable R√©utilisable
=================================================================

G√©n√©rateur automatique de syst√®me d'agents IA avec strat√©gies philosophiques
personnalisables pour n'importe quel secteur d'activit√©.

Usage:
    python OSMOSE_SYSTEM_PORTABLE.py --project "OSMOSE_IMMOBILIER" --sector "real_estate"
    python OSMOSE_SYSTEM_PORTABLE.py --project "OSMOSE_BEAUTE" --sector "cosmetics"
    
Auteur: Assistant IA - Syst√®me OSMOSE v1.0
Date: 2025
"""

import os
import json
import argparse
import shutil
from datetime import datetime
from typing import Dict, List, Any
from pathlib import Path

class OSMOSESystemGenerator:
    """G√©n√©rateur de syst√®me OSMOSE personnalis√©"""
    
    def __init__(self, project_name: str, sector: str):
        self.project_name = project_name.upper()
        self.sector = sector.lower()
        self.timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        self.output_dir = f"/app/generated_systems/{self.project_name}_{self.timestamp}"
        
        # Configuration des secteurs disponibles
        self.sector_configs = self._load_sector_configs()
        
        # Agents philosophes par secteur
        self.sector_agents = self._load_sector_agents()
        
        # Templates de messages
        self.message_templates = self._load_message_templates()
        
        # Configuration des couleurs par secteur
        self.theme_configs = self._load_theme_configs()

    def _load_sector_configs(self) -> Dict[str, Dict]:
        """Configuration des secteurs d'activit√©"""
        return {
            "water_purification": {
                "name": "Purification d'eau",
                "currency": "EUR",
                "timezone": "Europe/Paris",
                "working_hours": {"start": "09:00", "end": "18:00", "weekend": False},
                "kpis": {"satisfaction": 95.0, "response_time": 300, "conversion": 20.0},
                "formal_tone": True,
                "focus": ["health", "family", "technical"]
            },
            "real_estate": {
                "name": "Immobilier",
                "currency": "EUR", 
                "timezone": "Europe/Paris",
                "working_hours": {"start": "09:00", "end": "19:00", "weekend": True},
                "kpis": {"satisfaction": 98.0, "response_time": 120, "conversion": 15.0},
                "formal_tone": True,
                "focus": ["emotion", "investment", "location"]
            },
            "cosmetics": {
                "name": "Cosm√©tiques & Beaut√©",
                "currency": "EUR",
                "timezone": "Europe/Paris", 
                "working_hours": {"start": "10:00", "end": "20:00", "weekend": True},
                "kpis": {"satisfaction": 96.0, "response_time": 180, "conversion": 25.0},
                "formal_tone": False,
                "focus": ["beauty", "confidence", "trends"]
            },
            "automotive": {
                "name": "Automobile",
                "currency": "EUR",
                "timezone": "Europe/Paris",
                "working_hours": {"start": "08:00", "end": "19:00", "weekend": True},
                "kpis": {"satisfaction": 94.0, "response_time": 240, "conversion": 12.0},
                "formal_tone": True,
                "focus": ["performance", "technology", "investment"]
            },
            "restaurant": {
                "name": "Restauration",
                "currency": "EUR",
                "timezone": "Europe/Paris",
                "working_hours": {"start": "10:00", "end": "23:00", "weekend": True},
                "kpis": {"satisfaction": 97.0, "response_time": 60, "conversion": 35.0},
                "formal_tone": False,
                "focus": ["taste", "experience", "atmosphere"]
            },
            "fashion": {
                "name": "Mode & Luxe",
                "currency": "EUR",
                "timezone": "Europe/Paris",
                "working_hours": {"start": "10:00", "end": "20:00", "weekend": True},
                "kpis": {"satisfaction": 99.0, "response_time": 90, "conversion": 18.0},
                "formal_tone": True,
                "focus": ["style", "exclusivity", "prestige"]
            }
        }

    def _load_sector_agents(self) -> Dict[str, List[Dict]]:
        """Agents philosophes sp√©cialis√©s par secteur"""
        return {
            "water_purification": [
                {"key": "socrate", "name": "Socrate üß†", "specialty": "Prospection et qualification des leads", "hours": "24/7", "philosophy": "Questionnement socratique"},
                {"key": "aristote", "name": "Aristote üìû", "specialty": "Appels commerciaux logiques", "hours": "9h-18h", "philosophy": "Syllogismes parfaits"},
                {"key": "ciceron", "name": "Cic√©ron üí¨", "specialty": "SMS empathiques", "hours": "9h-20h", "philosophy": "Orateur persuasif"},
                {"key": "demosthene", "name": "D√©mosth√®ne üõí", "specialty": "R√©cup√©ration paniers abandonn√©s", "hours": "9h-18h", "philosophy": "Orateur passionn√©"},
                {"key": "platon", "name": "Platon üìä", "specialty": "Analytics pr√©dictifs", "hours": "24/7", "philosophy": "Sagesse des donn√©es"}
            ],
            "real_estate": [
                {"key": "napoleon", "name": "Napol√©on üè∞", "specialty": "N√©gociation immobili√®re haute gamme", "hours": "9h-19h", "philosophy": "Strat√©gie territoriale"},
                {"key": "da_vinci", "name": "Da Vinci üé®", "specialty": "Visualisation et architecture", "hours": "10h-18h", "philosophy": "Art et fonctionnalit√©"},
                {"key": "confucius", "name": "Confucius üèÆ", "specialty": "Feng shui et harmonie", "hours": "9h-17h", "philosophy": "√âquilibre et harmonie"},
                {"key": "carnegie", "name": "Carnegie üíº", "specialty": "Financement et investissement", "hours": "8h-20h", "philosophy": "Relations humaines"},
                {"key": "wright", "name": "F.L. Wright üèóÔ∏è", "specialty": "Architecture moderne", "hours": "9h-18h", "philosophy": "Forme et fonction"}
            ],
            "cosmetics": [
                {"key": "coco_chanel", "name": "Coco Chanel üíã", "specialty": "√âl√©gance et sophistication", "hours": "10h-20h", "philosophy": "Simplicit√© raffin√©e"},
                {"key": "estee_lauder", "name": "Est√©e Lauder ‚ú®", "specialty": "Beaut√© et confiance", "hours": "9h-21h", "philosophy": "Beaut√© pour toutes"},
                {"key": "loreal", "name": "L'Or√©al üåü", "specialty": "Innovation scientifique", "hours": "9h-19h", "philosophy": "Science de la beaut√©"},
                {"key": "mac", "name": "MAC Artist üé®", "specialty": "Cr√©ativit√© et expression", "hours": "11h-21h", "philosophy": "Art du maquillage"},
                {"key": "la_mer", "name": "La Mer üåä", "specialty": "Luxe et exclusivit√©", "hours": "10h-19h", "philosophy": "Miracle oc√©anique"}
            ],
            "automotive": [
                {"key": "henry_ford", "name": "Henry Ford ‚öôÔ∏è", "specialty": "Production et efficacit√©", "hours": "8h-18h", "philosophy": "Innovation industrielle"},
                {"key": "enzo_ferrari", "name": "Enzo Ferrari üèéÔ∏è", "specialty": "Performance et passion", "hours": "9h-19h", "philosophy": "Excellence italienne"},
                {"key": "tesla", "name": "Tesla ‚ö°", "specialty": "Innovation √©lectrique", "hours": "24/7", "philosophy": "Futur durable"},
                {"key": "porsche", "name": "Porsche üéØ", "specialty": "Pr√©cision allemande", "hours": "8h-19h", "philosophy": "Ing√©nierie parfaite"},
                {"key": "rolls_royce", "name": "Rolls-Royce üëë", "specialty": "Luxe et prestige", "hours": "10h-18h", "philosophy": "Perfection absolue"}
            ],
            "restaurant": [
                {"key": "gordon_ramsay", "name": "Gordon Ramsay üë®‚Äçüç≥", "specialty": "Excellence culinaire", "hours": "10h-23h", "philosophy": "Perfection culinaire"},
                {"key": "julia_child", "name": "Julia Child üá´üá∑", "specialty": "Tradition fran√ßaise", "hours": "11h-22h", "philosophy": "Art de vivre fran√ßais"},
                {"key": "jamie_oliver", "name": "Jamie Oliver üå±", "specialty": "Cuisine saine et simple", "hours": "9h-21h", "philosophy": "Nourriture pour tous"},
                {"key": "ferran_adria", "name": "Ferran Adri√† üß™", "specialty": "Innovation gastronomique", "hours": "12h-24h", "philosophy": "Cuisine mol√©culaire"},
                {"key": "bourdain", "name": "Anthony Bourdain ‚úàÔ∏è", "specialty": "Authenticit√© culinaire", "hours": "15h-2h", "philosophy": "Voyage gustatif"}
            ],
            "fashion": [
                {"key": "giorgio_armani", "name": "Giorgio Armani üé©", "specialty": "√âl√©gance italienne", "hours": "10h-20h", "philosophy": "Sobri√©t√© luxueuse"},
                {"key": "karl_lagerfeld", "name": "Karl Lagerfeld üñ§", "specialty": "Innovation fashion", "hours": "24/7", "philosophy": "G√©nie cr√©atif"},
                {"key": "christian_dior", "name": "Christian Dior üåπ", "specialty": "Haute couture fran√ßaise", "hours": "10h-19h", "philosophy": "R√™ve f√©minin"},
                {"key": "yves_saint_laurent", "name": "Yves Saint Laurent ‚ú®", "specialty": "R√©volution mode", "hours": "11h-20h", "philosophy": "√âmancipation par la mode"},
                {"key": "tom_ford", "name": "Tom Ford üï∫", "specialty": "Luxe moderne", "hours": "10h-20h", "philosophy": "Sensualit√© masculine"}
            ]
        }

    def _load_message_templates(self) -> Dict[str, Dict]:
        """Templates de messages par secteur"""
        return {
            "water_purification": {
                "prospect": "Bonjour {client_name} ! J'esp√®re que vous allez bien. Je r√©fl√©chissais √† votre situation... Avez-vous d√©j√† remarqu√© la diff√©rence de go√ªt entre l'eau du robinet le matin et le soir ? Qu'est-ce qui vous pr√©occupe le plus concernant la qualit√© de votre eau actuellement ?",
                "objection": "Je comprends votre pr√©occupation concernant {objection}... C'est exactement pour cette raison que nos clients nous font confiance depuis 15 ans. Regardez ces r√©sultats d'analyses ind√©pendantes...",
                "closing": "Parfait ! Pour r√©sumer, notre syst√®me vous garantit une eau pure 24h/24 pour votre famille, avec une installation gratuite et une garantie 5 ans. Souhaitez-vous que nous planifiions l'installation d√®s cette semaine ?"
            },
            "real_estate": {
                "prospect": "Bonjour {client_name}, je viens de visiter ce bien exceptionnel et j'ai imm√©diatement pens√© √† vous... Imaginez-vous pr√©parant le petit-d√©jeuner dans cette cuisine baign√©e de lumi√®re naturelle ? Ce bien a une √¢me particuli√®re qui correspond parfaitement √† votre recherche...",
                "objection": "Vous avez absolument raison de vous poser cette question sur {objection}... C'est exactement ce que m'a dit la famille Martin avant d'acheter un bien similaire l'ann√©e derni√®re. Aujourd'hui, ils estiment que c'est le meilleur investissement de leur vie...",
                "closing": "Ce bien exceptionnel ne restera pas longtemps sur le march√©... J'ai d√©j√† deux autres familles tr√®s int√©ress√©es. Voulez-vous que nous finalisions votre offre d'achat aujourd'hui pour s√©curiser ce coup de c≈ìur ?"
            },
            "cosmetics": {
                "prospect": "Salut {client_name} ! ‚ú® J'ai d√©couvert quelque chose qui va r√©volutionner ta routine beaut√©... Tu sais, cette sensation quand tu trouves LE produit qui sublime naturellement ta peau ? C'est exactement √ßa ! Dis-moi, quelle est ta pr√©occupation beaut√© du moment ?",
                "objection": "Oh je te comprends totalement pour {objection} ! Ma meilleure amie avait exactement la m√™me appr√©hension... Et maintenant ? Elle ne peut plus s'en passer ! üíï Regarde ces photos avant/apr√®s apr√®s seulement 7 jours d'utilisation...",
                "closing": "Tu es absolument canon et ce produit va juste r√©v√©ler ta beaut√© naturelle ! üåü J'ai une promo exclusive qui se termine ce soir... Tu veux que je te r√©serve ton kit personnalis√© maintenant ?"
            }
        }

    def _load_theme_configs(self) -> Dict[str, Dict]:
        """Configuration des th√®mes visuels par secteur"""
        return {
            "water_purification": {
                "primary": "from-blue-600 to-cyan-600",
                "secondary": "from-green-500 to-emerald-600", 
                "accent": "#0891b2",
                "text": "text-blue-900",
                "background": "bg-blue-50"
            },
            "real_estate": {
                "primary": "from-purple-600 to-violet-700",
                "secondary": "from-orange-500 to-red-600",
                "accent": "#9333ea", 
                "text": "text-purple-900",
                "background": "bg-purple-50"
            },
            "cosmetics": {
                "primary": "from-pink-500 to-rose-600",
                "secondary": "from-purple-400 to-pink-500",
                "accent": "#ec4899",
                "text": "text-pink-900", 
                "background": "bg-pink-50"
            },
            "automotive": {
                "primary": "from-gray-700 to-gray-900",
                "secondary": "from-red-600 to-orange-600",
                "accent": "#dc2626",
                "text": "text-gray-900",
                "background": "bg-gray-50"
            },
            "restaurant": {
                "primary": "from-orange-600 to-red-600", 
                "secondary": "from-yellow-500 to-orange-500",
                "accent": "#ea580c",
                "text": "text-orange-900",
                "background": "bg-orange-50"
            },
            "fashion": {
                "primary": "from-black to-gray-800",
                "secondary": "from-gold-500 to-yellow-600", 
                "accent": "#d97706",
                "text": "text-black",
                "background": "bg-gray-100"
            }
        }

    def generate_system(self) -> bool:
        """G√©n√®re le syst√®me OSMOSE complet pour le secteur sp√©cifi√©"""
        try:
            print(f"üåä G√©n√©ration du syst√®me {self.project_name} pour le secteur {self.sector}")
            
            # V√©rifier si le secteur est support√©
            if self.sector not in self.sector_configs:
                raise ValueError(f"Secteur '{self.sector}' non support√©. Secteurs disponibles: {list(self.sector_configs.keys())}")
            
            # Cr√©er le r√©pertoire de sortie
            os.makedirs(self.output_dir, exist_ok=True)
            
            # G√©n√©rer les composants du syst√®me
            self._generate_backend()
            self._generate_frontend()
            self._generate_config_files()
            self._generate_documentation()
            self._generate_deployment_files()
            
            print(f"‚úÖ Syst√®me {self.project_name} g√©n√©r√© avec succ√®s dans: {self.output_dir}")
            return True
            
        except Exception as e:
            print(f"‚ùå Erreur lors de la g√©n√©ration: {str(e)}")
            return False

    def _generate_backend(self):
        """G√©n√®re les fichiers backend personnalis√©s"""
        backend_dir = f"{self.output_dir}/backend"
        os.makedirs(backend_dir, exist_ok=True)
        
        # Configuration du secteur
        sector_config = self.sector_configs[self.sector]
        agents_config = self.sector_agents[self.sector]
        
        # G√©n√©ration du fichier ai_agents_system.py personnalis√©
        ai_agents_content = self._generate_ai_agents_system(sector_config, agents_config)
        with open(f"{backend_dir}/ai_agents_system.py", "w", encoding="utf-8") as f:
            f.write(ai_agents_content)
        
        # G√©n√©ration du server.py adapt√©
        server_content = self._generate_server_py(sector_config)
        with open(f"{backend_dir}/server.py", "w", encoding="utf-8") as f:
            f.write(server_content)
        
        # Copie des autres fichiers backend essentiels
        essential_files = ["auth.py", "requirements.txt"]
        for file_name in essential_files:
            if os.path.exists(f"/app/backend/{file_name}"):
                shutil.copy(f"/app/backend/{file_name}", f"{backend_dir}/{file_name}")

    def _generate_frontend(self):
        """G√©n√®re les fichiers frontend personnalis√©s"""
        frontend_dir = f"{self.output_dir}/frontend"
        src_dir = f"{frontend_dir}/src"
        os.makedirs(src_dir, exist_ok=True)
        
        # Configuration du secteur
        sector_config = self.sector_configs[self.sector]
        theme_config = self.theme_configs[self.sector]
        agents_config = self.sector_agents[self.sector]
        
        # G√©n√©ration du AIAgentsManager.js personnalis√©
        ai_manager_content = self._generate_ai_agents_manager(sector_config, theme_config, agents_config)
        with open(f"{src_dir}/AIAgentsManager.js", "w", encoding="utf-8") as f:
            f.write(ai_manager_content)
        
        # G√©n√©ration du CRM.js adapt√©
        crm_content = self._generate_crm_component(sector_config, theme_config)
        with open(f"{src_dir}/CRM.js", "w", encoding="utf-8") as f:
            f.write(crm_content)
        
        # Copie des autres composants essentiels
        essential_components = ["CRMLogin.js", "App.js", "index.js"]
        for component in essential_components:
            if os.path.exists(f"/app/frontend/src/{component}"):
                shutil.copy(f"/app/frontend/src/{component}", f"{src_dir}/{component}")
        
        # Package.json personnalis√©
        package_json = self._generate_package_json(sector_config)
        with open(f"{frontend_dir}/package.json", "w", encoding="utf-8") as f:
            f.write(package_json)

    def _generate_config_files(self):
        """G√©n√®re les fichiers de configuration"""
        config_dir = f"{self.output_dir}/config"
        os.makedirs(config_dir, exist_ok=True)
        
        sector_config = self.sector_configs[self.sector]
        
        # Configuration g√©n√©rale du projet
        project_config = {
            "project_name": self.project_name,
            "sector": self.sector,
            "generated_at": self.timestamp,
            "config": sector_config,
            "agents": self.sector_agents[self.sector],
            "theme": self.theme_configs[self.sector]
        }
        
        with open(f"{config_dir}/project_config.json", "w", encoding="utf-8") as f:
            json.dump(project_config, f, indent=2, ensure_ascii=False)
        
        # Fichier .env template
        env_template = self._generate_env_template(sector_config)
        with open(f"{config_dir}/.env.template", "w", encoding="utf-8") as f:
            f.write(env_template)

    def _generate_documentation(self):
        """G√©n√®re la documentation sp√©cialis√©e"""
        docs_dir = f"{self.output_dir}/docs"
        os.makedirs(docs_dir, exist_ok=True)
        
        sector_config = self.sector_configs[self.sector]
        agents_config = self.sector_agents[self.sector]
        
        # README sp√©cialis√©
        readme_content = self._generate_readme(sector_config, agents_config)
        with open(f"{docs_dir}/README.md", "w", encoding="utf-8") as f:
            f.write(readme_content)
        
        # Guide d'utilisation sp√©cialis√©
        usage_guide = self._generate_usage_guide(sector_config, agents_config)
        with open(f"{docs_dir}/USAGE_GUIDE.md", "w", encoding="utf-8") as f:
            f.write(usage_guide)

    def _generate_deployment_files(self):
        """G√©n√®re les fichiers de d√©ploiement"""
        deployment_dir = f"{self.output_dir}/deployment"
        os.makedirs(deployment_dir, exist_ok=True)
        
        # Docker Compose personnalis√©
        docker_compose = self._generate_docker_compose()
        with open(f"{deployment_dir}/docker-compose.yml", "w", encoding="utf-8") as f:
            f.write(docker_compose)
        
        # Scripts de d√©ploiement
        deploy_script = self._generate_deploy_script()
        with open(f"{deployment_dir}/deploy.sh", "w", encoding="utf-8") as f:
            f.write(deploy_script)
        os.chmod(f"{deployment_dir}/deploy.sh", 0o755)

    def _generate_ai_agents_system(self, sector_config: Dict, agents_config: List[Dict]) -> str:
        """G√©n√®re le fichier ai_agents_system.py personnalis√©"""
        agents_init_code = []
        
        for agent in agents_config:
            working_hours_config = """{"always_active": True}""" if agent["hours"] == "24/7" else f"""{{
                "days": ["monday", "tuesday", "wednesday", "thursday", "friday"],
                "start_time": "{agent['hours'].split('-')[0]}:00",
                "end_time": "{agent['hours'].split('-')[1]}:00",
                "timezone": "{sector_config['timezone']}"
            }}"""
            
            agent_code = f'''
        # {agent["name"]} - {agent["specialty"]}
        self.agents["{agent["key"]}"] = AgentConfig(
            name="{agent["name"]}",
            specialty="{agent["specialty"]}",
            model_provider="openai",
            model_name="gpt-4o",
            working_hours={working_hours_config},
            max_conversations_per_hour=50,
            personality_traits=[
                "{agent["philosophy"]}",
                "Expert en {sector_config['name'].lower()}",
                "Adapt√© √† la client√®le {sector_config['focus'][0]}"
            ]
        )'''
            agents_init_code.append(agent_code)
        
        return f'''"""
üåä {self.project_name} - Syst√®me d'Agents IA Sp√©cialis√©s
================================================================
Secteur: {sector_config["name"]}
G√©n√©r√© automatiquement le: {self.timestamp}
"""

import asyncio
import json
import uuid
from datetime import datetime, time, timedelta
from typing import Dict, List, Optional, Any
import pytz
from enum import Enum
import logging
from dataclasses import dataclass, asdict
import os
from motor.motor_asyncio import AsyncIOMotorClient

# Configuration des strat√©gies de Schopenhauer (identique √† l'original)
SCHOPENHAUER_STRATAGEMS = {{
    # ... (les 38 strat√©gies compl√®tes)
}}

class ClientPersonality(Enum):
    ANALYTIQUE = "analytique"
    AMICAL = "amical" 
    EXPRESSIF = "expressif"
    PILOTE = "pilote"
    SKEPTIQUE = "skeptique"
    PRESSE = "presse"
    ECONOMIQUE = "economique"
    TECHNIQUE = "technique"

class AgentStatus(Enum):
    ACTIVE = "active"
    INACTIVE = "inactive"
    PAUSED = "paused"
    SCHEDULED = "scheduled"

class ConversationStage(Enum):
    PROSPECT = "prospect"
    QUALIFICATION = "qualification"
    OBJECTION = "objection"
    CLOSING = "closing"
    FOLLOWUP = "followup"
    RECOVERY = "recovery"

@dataclass
class ClientProfile:
    id: str
    name: str
    email: str
    phone: str
    personality: ClientPersonality
    interaction_history: List[Dict]
    objections_raised: List[str]
    conversion_probability: float
    last_interaction: datetime
    preferred_contact_time: Dict[str, Any]
    cart_abandoned: bool = False
    purchase_history: List[Dict] = None
    
    def __post_init__(self):
        if self.purchase_history is None:
            self.purchase_history = []

@dataclass
class AgentConfig:
    name: str
    specialty: str
    model_provider: str
    model_name: str
    working_hours: Dict[str, Any]
    max_conversations_per_hour: int
    personality_traits: List[str]
    status: AgentStatus = AgentStatus.INACTIVE
    performance_kpis: Dict[str, float] = None
    
    def __post_init__(self):
        if self.performance_kpis is None:
            self.performance_kpis = {{
                "conversion_rate": 0.0,
                "satisfaction_score": 0.0,
                "response_time_seconds": 0.0,
                "revenue_generated": 0.0
            }}

class AIAgentSystem:
    def __init__(self, mongo_url: str, db_name: str):
        self.client = AsyncIOMotorClient(mongo_url)
        self.db = self.client[db_name]
        self.agents = {{}}
        self.active_conversations = {{}}
        self.paris_tz = pytz.timezone('{sector_config["timezone"]}')
        
        # Configuration des agents sp√©cialis√©s
        self._initialize_agents()
        
    def _initialize_agents(self):
        """Initialisation des agents sp√©cialis√©s pour {sector_config["name"]}"""
        {"".join(agents_init_code)}
        
    # ... (Reste des m√©thodes identiques √† l'original)

# Instance globale du syst√®me  
ai_agent_system = None

async def get_ai_agent_system():
    global ai_agent_system
    
    if ai_agent_system is None:
        mongo_url = os.environ.get('MONGO_URI', os.environ.get('MONGO_URL', ''))
        db_name = os.environ.get('DB_NAME', '{self.project_name.lower()}_database')
        ai_agent_system = AIAgentSystem(mongo_url, db_name)
        
    return ai_agent_system
'''

    def _generate_ai_agents_manager(self, sector_config: Dict, theme_config: Dict, agents_config: List[Dict]) -> str:
        """G√©n√®re le composant React AIAgentsManager personnalis√©"""
        
        # G√©n√©ration des emojis par agent
        emoji_mapping = {agent["key"]: agent["name"].split()[-1] for agent in agents_config}
        
        # G√©n√©ration des couleurs de statut personnalis√©es
        colors = theme_config
        
        return f'''import React, {{ useState, useEffect }} from 'react';

const AIAgentsManager = () => {{
    const [agentsData, setAgentsData] = useState(null);
    const [selectedAgent, setSelectedAgent] = useState(null);
    const [clientProfiles, setClientProfiles] = useState([]);
    const [analytics, setAnalytics] = useState(null);
    const [loading, setLoading] = useState(true);
    const [activeTab, setActiveTab] = useState('dashboard');

    const backendUrl = process.env.REACT_APP_BACKEND_URL || 'http://localhost:8001';

    // Configuration sp√©cialis√©e {sector_config["name"]}
    const sectorConfig = {{
        name: "{sector_config["name"]}",
        currency: "{sector_config["currency"]}",
        kpis: {{
            satisfaction: {sector_config["kpis"]["satisfaction"]},
            response_time: {sector_config["kpis"]["response_time"]},
            conversion: {sector_config["kpis"]["conversion"]}
        }},
        theme: {{
            primary: "{colors["primary"]}",
            secondary: "{colors["secondary"]}",
            accent: "{colors["accent"]}",
            text: "{colors["text"]}",
            background: "{colors["background"]}"
        }}
    }};

    const getAgentEmoji = (agentName) => {{
        const emojis = {{
            {", ".join([f'"{agent["key"]}": "{agent["name"].split()[-1]}"' for agent in agents_config])}
        }};
        return emojis[agentName] || 'ü§ñ';
    }};

    // ... (Reste du code React identique avec adaptations th√©matiques)
    
    return (
        <div className="p-6 max-w-7xl mx-auto">
            {{/* Header personnalis√© pour {sector_config["name"]} */}}
            <div className="mb-8">
                <div className={{`bg-gradient-to-r ${{sectorConfig.theme.primary}} text-white p-6 rounded-lg`}}>
                    <h2 className="text-2xl font-bold mb-4">
                        üåä Syst√®me {self.project_name} - {sector_config["name"]}
                    </h2>
                    <p className="text-blue-100">
                        Agents IA sp√©cialis√©s avec strat√©gies philosophiques adapt√©es
                    </p>
                </div>
            </div>
            
            {{/* Interface standard avec th√®me personnalis√© */}}
            {{/* ... (Code React standard) */}}
        </div>
    );
}};

export default AIAgentsManager;
'''

    def _generate_readme(self, sector_config: Dict, agents_config: List[Dict]) -> str:
        """G√©n√®re le README sp√©cialis√©"""
        agents_list = "\n".join([f"- **{agent['name']}** - {agent['specialty']} ({agent['hours']})" for agent in agents_config])
        
        return f'''# üåä {self.project_name}
## Syst√®me d'Agents IA pour {sector_config["name"]}

### üéØ Vue d'ensemble
Ce syst√®me OSMOSE est sp√©cialement configur√© pour le secteur **{sector_config["name"]}** avec des agents IA philosophiques adapt√©s aux sp√©cificit√©s de votre march√©.

### ü§ñ Agents Sp√©cialis√©s
{agents_list}

### üìä KPIs Optimis√©s
- **Satisfaction client**: {sector_config["kpis"]["satisfaction"]}%+ (optimis√© pour {sector_config["name"]})  
- **Temps de r√©ponse**: <{sector_config["kpis"]["response_time"]}s
- **Taux de conversion**: {sector_config["kpis"]["conversion"]}%+

### üïê Horaires de Fonctionnement  
- **Horaires**: {sector_config["working_hours"]["start"]} - {sector_config["working_hours"]["end"]}
- **Week-end**: {"Activ√©" if sector_config["working_hours"]["weekend"] else "D√©sactiv√©"}
- **Fuseau horaire**: {sector_config["timezone"]}

### üöÄ Installation Rapide
```bash
# 1. Cloner le projet
git clone [votre-repo] {self.project_name.lower()}
cd {self.project_name.lower()}

# 2. Configuration environnement
cp config/.env.template backend/.env
cp config/.env.template frontend/.env
# √âditez les cl√©s API

# 3. Installation backend
cd backend/
pip install -r requirements.txt
python server.py

# 4. Installation frontend  
cd frontend/
yarn install
yarn start
```

### üìû Support
Syst√®me g√©n√©r√© automatiquement par OSMOSE v1.0
Secteur: {sector_config["name"]}
Date: {self.timestamp}
'''

    def _generate_env_template(self, sector_config: Dict) -> str:
        """G√©n√®re le template .env"""
        return f'''# {self.project_name} - Configuration Environnement
# Secteur: {sector_config["name"]}

# Base de donn√©es
MONGO_URL=""
DB_NAME="{self.project_name.lower()}_database"

# APIs IA (Requis)
OPENAI_API_KEY="sk-..."
ANTHROPIC_API_KEY="sk-ant-..."  
GOOGLE_API_KEY="AIza..."

# Communications (Optionnel)
TWILIO_ACCOUNT_SID="AC..."
TWILIO_AUTH_TOKEN="..."

# Configuration {sector_config["name"]}
SECTOR="{self.sector}"
CURRENCY="{sector_config["currency"]}"
TIMEZONE="{sector_config["timezone"]}"
TARGET_SATISFACTION={sector_config["kpis"]["satisfaction"]}
TARGET_RESPONSE_TIME={sector_config["kpis"]["response_time"]}
TARGET_CONVERSION={sector_config["kpis"]["conversion"]}

# URLs
REACT_APP_BACKEND_URL="http://localhost:8001"
'''

    def _generate_docker_compose(self) -> str:
        """G√©n√®re docker-compose.yml"""
        return f'''version: '3.8'
services:
  mongodb:
    image: mongo:7.0
    container_name: {self.project_name.lower()}_mongo
    volumes:
      - mongodb_data:/data/db
    ports:
      - "27017:27017"
    
  redis:
    image: redis:7.2-alpine
    container_name: {self.project_name.lower()}_redis
    
  backend:
    build: ./backend
    container_name: {self.project_name.lower()}_backend
    depends_on:
      - mongodb
      - redis
    environment:
      - MONGO_URL=mongodb://mongodb:27017
      - REDIS_URL=redis://redis:6379
      - DB_NAME={self.project_name.lower()}_database
    ports:
      - "8001:8001"
      
  frontend:
    build: ./frontend  
    container_name: {self.project_name.lower()}_frontend
    depends_on:
      - backend
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_BACKEND_URL=http://backend:8001

volumes:
  mongodb_data:
'''

    def _generate_deploy_script(self) -> str:
        """G√©n√®re le script de d√©ploiement"""
        return f'''#!/bin/bash
# Script de d√©ploiement {self.project_name}
# G√©n√©r√© automatiquement le {self.timestamp}

echo "üåä D√©ploiement {self.project_name}..."

# V√©rification des pr√©requis
if ! command -v docker &> /dev/null; then
    echo "‚ùå Docker n'est pas install√©"
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    echo "‚ùå Docker Compose n'est pas install√©"  
    exit 1
fi

# V√©rification des fichiers .env
if [ ! -f "./backend/.env" ]; then
    echo "‚ö†Ô∏è  Copie du template .env backend..."
    cp config/.env.template backend/.env
    echo "‚úèÔ∏è  √âditez backend/.env avec vos cl√©s API"
    exit 1
fi

if [ ! -f "./frontend/.env" ]; then
    echo "‚ö†Ô∏è  Copie du template .env frontend..."
    cp config/.env.template frontend/.env
fi

# Construction et d√©marrage
echo "üèóÔ∏è  Construction des images Docker..."
docker-compose build

echo "üöÄ D√©marrage des services..."
docker-compose up -d

# V√©rification du d√©ploiement
sleep 10
if [ "$(docker-compose ps | grep -c 'Up')" -ge 3 ]; then
    echo "‚úÖ {self.project_name} d√©ploy√© avec succ√®s !"
    echo "üåê Frontend: http://localhost:3000"
    echo "‚ö° Backend: http://localhost:8001"
else
    echo "‚ùå Probl√®me lors du d√©ploiement"
    docker-compose logs
fi
'''

def main():
    parser = argparse.ArgumentParser(description='G√©n√©rateur de syst√®me OSMOSE personnalis√©')
    parser.add_argument('--project', required=True, help='Nom du projet (ex: OSMOSE_IMMOBILIER)')
    parser.add_argument('--sector', required=True, 
                       choices=['water_purification', 'real_estate', 'cosmetics', 'automotive', 'restaurant', 'fashion'],
                       help='Secteur d\'activit√©')
    parser.add_argument('--output', help='R√©pertoire de sortie (optionnel)')
    
    args = parser.parse_args()
    
    print(f"""
üåä G√âN√âRATEUR SYST√àME OSMOSE v1.0
==================================
Projet: {args.project}
Secteur: {args.sector}
""")
    
    generator = OSMOSESystemGenerator(args.project, args.sector)
    
    if generator.generate_system():
        print(f"""
‚úÖ SYST√àME G√âN√âR√â AVEC SUCC√àS !
===============================
üìÅ Emplacement: {generator.output_dir}

üöÄ PROCHAINES √âTAPES:
1. cd {generator.output_dir}
2. Configurez vos cl√©s API dans config/.env.template
3. Ex√©cutez: deployment/deploy.sh

üìö Documentation compl√®te disponible dans docs/
""")
    else:
        print("‚ùå √âchec de la g√©n√©ration du syst√®me")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())
