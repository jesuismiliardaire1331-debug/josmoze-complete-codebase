"""
Agent de Surveillance Marque 24/7 - JOSMOZE.COM
Surveille en permanence que :
1. Aucune mention "emergent" ou "made with emergent" n'appara√Æt
2. Le site reste toujours www.josmoze.com
3. Aucune r√©f√©rence ind√©sirable dans le code ou l'interface

FONCTIONNEMENT 24/7 : Cet agent se lance automatiquement au d√©marrage du serveur
et continue de surveiller ind√©finiment chaque minute.
"""

import os
import time
import asyncio
import logging
import re
from datetime import datetime
from typing import List, Dict, Set
import requests
from pathlib import Path
import json
from motor.motor_asyncio import AsyncIOMotorClient

# Configuration de l'agent
MONITORING_CONFIG = {
    "check_interval": 30,  # üö® SURVEILLANCE RENFORC√âE : V√©rification toutes les 30 secondes ‚ö°
    "frontend_url": os.environ.get("REACT_APP_BACKEND_URL", "https://www.josmoze.com").replace("/api", ""),
    "crm_url": os.environ.get("REACT_APP_BACKEND_URL", "https://www.josmoze.com").replace("/api", "") + "/crm",
    "scan_directories": ["/app/frontend/src", "/app/backend", "/app"],
    "excluded_files": [".git", "node_modules", "__pycache__", ".emergent", "brand_monitoring_agent.py"],
    "alert_threshold": 1  # üö® ALERTE IMM√âDIATE - Alerter d√®s la premi√®re d√©tection
}

# Mots interdits √† surveiller (case-insensitive) - SURVEILLANCE RENFORC√âE
FORBIDDEN_TERMS = [
    "emergent",
    "made with emergent", 
    "emergentagent",
    "emergent.com",
    "preview.emergentagent.com",
    "osmose.com",  # Ancien domaine √† √©viter
    "emergentagent.com",
    # üö® TERMES SUPPL√âMENTAIRES SURVEILL√âS
    "powered by emergent",
    "built with emergent", 
    "emergent ai",
    "emergent platform",
    "emergent solution"
]

# Termes autoris√©s (pour √©viter les faux positifs)
ALLOWED_TERMS = [
    "emergency",  # Mot diff√©rent, autoris√©
    "emerging",   # Mot diff√©rent, autoris√©
    "merged",     # Mot diff√©rent, autoris√©
]

class BrandMonitoringAgent:
    def __init__(self):
        mongo_url = os.getenv("MONGO_URI", os.getenv("MONGO_URL", ""))
        self.mongo_client = AsyncIOMotorClient(mongo_url)
        self.db = self.mongo_client[os.getenv("DB_NAME", "josmoze_production")]
        self.setup_logging()
        self.running = False
        self.violation_count = 0
        self.last_scan_results = {}

    def setup_logging(self):
        """Configuration du syst√®me de logging"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - BrandMonitor - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('/var/log/brand_monitoring.log'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger(__name__)

    def is_forbidden_term(self, text: str) -> List[Dict]:
        """
        V√©rifie si le texte contient des termes interdits
        Retourne la liste des violations trouv√©es
        """
        violations = []
        text_lower = text.lower()
        
        for term in FORBIDDEN_TERMS:
            if term.lower() in text_lower:
                # V√©rifier que ce n'est pas un terme autoris√©
                is_allowed = False
                for allowed in ALLOWED_TERMS:
                    if allowed.lower() in text_lower:
                        is_allowed = True
                        break
                
                if not is_allowed:
                    # Trouver les positions exactes
                    pattern = re.compile(re.escape(term), re.IGNORECASE)
                    matches = pattern.finditer(text)
                    
                    for match in matches:
                        violations.append({
                            "term": term,
                            "found_text": match.group(),
                            "position": match.start(),
                            "context": text[max(0, match.start()-50):match.end()+50]
                        })
        
        return violations

    async def scan_file_content(self, file_path: str) -> List[Dict]:
        """
        Scanne le contenu d'un fichier pour d√©tecter les violations
        """
        violations = []
        
        try:
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read()
                
            file_violations = self.is_forbidden_term(content)
            
            for violation in file_violations:
                violations.append({
                    **violation,
                    "file": file_path,
                    "type": "file_content"
                })
                
        except Exception as e:
            self.logger.error(f"Erreur lecture fichier {file_path}: {str(e)}")
        
        return violations

    async def scan_directory(self, directory: str) -> List[Dict]:
        """
        Scanne r√©cursivement un r√©pertoire pour d√©tecter les violations
        """
        violations = []
        
        try:
            for root, dirs, files in os.walk(directory):
                # Exclure certains r√©pertoires
                dirs[:] = [d for d in dirs if not any(excluded in d for excluded in MONITORING_CONFIG["excluded_files"])]
                
                for file in files:
                    # Exclure certains types de fichiers
                    if any(excluded in file for excluded in MONITORING_CONFIG["excluded_files"]):
                        continue
                    
                    # V√©rifier seulement les fichiers texte/code
                    if file.endswith(('.py', '.js', '.jsx', '.ts', '.tsx', '.html', '.css', '.json', '.md', '.txt', '.env')):
                        file_path = os.path.join(root, file)
                        file_violations = await self.scan_file_content(file_path)
                        violations.extend(file_violations)
                        
        except Exception as e:
            self.logger.error(f"Erreur scan r√©pertoire {directory}: {str(e)}")
        
        return violations

    async def scan_web_content(self, url: str) -> List[Dict]:
        """
        Scanne le contenu web visible pour d√©tecter les violations
        """
        violations = []
        
        try:
            response = requests.get(url, timeout=10)
            if response.status_code == 200:
                content = response.text
                
                web_violations = self.is_forbidden_term(content)
                
                for violation in web_violations:
                    violations.append({
                        **violation,
                        "url": url,
                        "type": "web_content"
                    })
            else:
                self.logger.warning(f"Impossible d'acc√©der √† {url}: {response.status_code}")
                
        except Exception as e:
            self.logger.error(f"Erreur scan web {url}: {str(e)}")
        
        return violations

    async def check_domain_consistency(self) -> List[Dict]:
        """
        V√©rifie que les r√©f√©rences au domaine sont coh√©rentes (josmoze.com)
        """
        violations = []
        
        # V√©rifier les fichiers de configuration
        config_files = [
            "/app/frontend/.env",
            "/app/backend/.env",
            "/app/frontend/package.json"
        ]
        
        correct_domain = "josmoze.com"
        incorrect_domains = [
            "osmose.com",
            "emergentagent.com",
            "preview.emergentagent.com"
        ]
        
        for config_file in config_files:
            try:
                if os.path.exists(config_file):
                    with open(config_file, 'r') as f:
                        content = f.read()
                    
                    for incorrect_domain in incorrect_domains:
                        if incorrect_domain in content and "preview.emergentagent.com" not in config_file:
                            violations.append({
                                "term": incorrect_domain,
                                "found_text": incorrect_domain,
                                "file": config_file,
                                "type": "domain_inconsistency",
                                "context": f"Domaine incorrect trouv√© : {incorrect_domain}"
                            })
            except Exception as e:
                self.logger.error(f"Erreur v√©rification domaine {config_file}: {str(e)}")
        
        return violations
    
    async def scan_system_configs(self) -> List[Dict]:
        """
        üÜï Scanner les fichiers de configuration syst√®me pour d√©tecter les violations
        """
        violations = []
        
        system_config_files = [
            "/app/package.json",
            "/app/frontend/package.json", 
            "/app/backend/requirements.txt",
            "/app/README.md",
            "/app/frontend/public/index.html",
            "/app/frontend/public/manifest.json"
        ]
        
        try:
            for config_file in system_config_files:
                if os.path.exists(config_file):
                    config_violations = await self.scan_file_content(config_file)
                    violations.extend(config_violations)
                    
        except Exception as e:
            self.logger.error(f"Erreur scan configurations syst√®me: {str(e)}")
        
        return violations

    async def scan_file_metadata(self) -> List[Dict]:
        """
        üÜï Scanner les m√©tadonn√©es et noms de fichiers pour d√©tecter les violations
        """
        violations = []
        
        try:
            for root, dirs, files in os.walk("/app"):
                # Exclure certains r√©pertoires
                dirs[:] = [d for d in dirs if not any(excluded in d for excluded in MONITORING_CONFIG["excluded_files"])]
                
                # V√©rifier les noms de fichiers et dossiers
                for name in dirs + files:
                    name_violations = self.is_forbidden_term(name)
                    for violation in name_violations:
                        violations.append({
                            **violation,
                            "file": os.path.join(root, name),
                            "type": "filename_metadata"
                        })
                        
        except Exception as e:
            self.logger.error(f"Erreur scan m√©tadonn√©es: {str(e)}")
        
        return violations

    async def perform_full_scan(self) -> Dict:
        """
        Effectue un scan complet de tous les √©l√©ments surveill√©s
        üö® MODE SURVEILLANCE RENFORC√âE ACTIV√â üö®
        """
        scan_start = datetime.utcnow()
        all_violations = []
        
        self.logger.info("üîç D√©but du scan complet de surveillance marque RENFORC√âE...")
        self.logger.info("‚ö° FR√âQUENCE: Toutes les 30 secondes | ALERTE: Imm√©diate")
        
        # 1. Scanner les r√©pertoires de code - SCAN APPROFONDI
        for directory in MONITORING_CONFIG["scan_directories"]:
            if os.path.exists(directory):
                self.logger.info(f"üìÇ Scan INTENSIF du r√©pertoire: {directory}")
                dir_violations = await self.scan_directory(directory)
                all_violations.extend(dir_violations)
        
        # 2. Scanner le contenu web visible - VERIFICATION MULTIPLE
        web_urls = [
            MONITORING_CONFIG["frontend_url"],
            MONITORING_CONFIG["crm_url"],
            # üö® URLs SUPPL√âMENTAIRES SURVEILL√âES
            MONITORING_CONFIG["frontend_url"] + "/products",
            MONITORING_CONFIG["frontend_url"] + "/contact",
            MONITORING_CONFIG["frontend_url"] + "/installation"
        ]
        
        for url in web_urls:
            self.logger.info(f"üåê Scan APPROFONDI de l'URL: {url}")
            web_violations = await self.scan_web_content(url)
            all_violations.extend(web_violations)
        
        # 3. V√©rifier la coh√©rence des domaines - CONTR√îLE STRICT
        self.logger.info("üè∑Ô∏è V√©rification STRICTE coh√©rence domaines...")
        domain_violations = await self.check_domain_consistency()
        all_violations.extend(domain_violations)
        
        # 4. üÜï NOUVEAU : Scanner les configurations syst√®me
        self.logger.info("‚öôÔ∏è Scan des configurations syst√®me...")
        config_violations = await self.scan_system_configs()
        all_violations.extend(config_violations)
        
        # 5. üÜï NOUVEAU : V√©rifier les m√©tadonn√©es des fichiers
        self.logger.info("üîß V√©rification m√©tadonn√©es des fichiers...")
        metadata_violations = await self.scan_file_metadata()
        all_violations.extend(metadata_violations)
        
        # Compilation des r√©sultats
        scan_results = {
            "scan_time": scan_start,
            "duration_seconds": (datetime.utcnow() - scan_start).total_seconds(),
            "violations_found": len(all_violations),
            "violations": all_violations,
            "status": "CLEAN" if len(all_violations) == 0 else "VIOLATIONS_DETECTED",
            "scan_mode": "REINFORCED_MONITORING",  # üö® Nouveau mode de surveillance
            "scan_frequency": "30_SECONDS"
        }
        
        # Log des r√©sultats - PLUS D√âTAILL√â
        if len(all_violations) == 0:
            self.logger.info("‚úÖ SCAN RENFORC√â TERMIN√â - AUCUNE VIOLATION D√âTECT√âE")
            self.violation_count = 0
        else:
            self.logger.critical(f"üö® ALERTE SURVEILLANCE RENFORC√âE - {len(all_violations)} VIOLATIONS D√âTECT√âES:")
            for violation in all_violations:
                self.logger.critical(f"  ‚ö†Ô∏è {violation['term']} trouv√© dans {violation.get('file', violation.get('url', 'unknown'))}")
            self.violation_count += 1
        
        # Sauvegarder les r√©sultats
        await self.save_scan_results(scan_results)
        self.last_scan_results = scan_results
        
        return scan_results

    async def save_scan_results(self, results: Dict):
        """
        Sauvegarde les r√©sultats du scan dans la base de donn√©es
        """
        try:
            # Convertir les r√©sultats pour MongoDB
            mongo_results = {
                **results,
                "_id": f"scan_{results['scan_time'].strftime('%Y%m%d_%H%M%S')}",
                "scan_time": results['scan_time']
            }
            
            await self.db.brand_monitoring.insert_one(mongo_results)
            
            # Garder seulement les 100 derniers scans
            old_scans = self.db.brand_monitoring.find().sort("scan_time", -1).skip(100)
            async for old_scan in old_scans:
                await self.db.brand_monitoring.delete_one({"_id": old_scan["_id"]})
                
        except Exception as e:
            self.logger.error(f"Erreur sauvegarde r√©sultats: {str(e)}")

    async def send_alert(self, violations: List[Dict]):
        """
        üö® Envoie une alerte RENFORC√âE en cas de d√©tection de violations
        """
        try:
            if self.violation_count >= MONITORING_CONFIG["alert_threshold"]:
                alert_message = f"""
üö®üö®üö® ALERTE SURVEILLANCE MARQUE RENFORC√âE - {datetime.utcnow().strftime('%d/%m/%Y %H:%M:%S')} üö®üö®üö®

‚ö†Ô∏è VIOLATIONS CRITIQUES D√âTECT√âES SUR www.josmoze.com ‚ö†Ô∏è

{len(violations)} violations d√©tect√©es en mode surveillance renforc√©e (30 secondes) :

"""
                for violation in violations[:10]:  # Montrer les 10 premi√®res
                    alert_message += f"üî¥ '{violation['term']}' dans {violation.get('file', violation.get('url', 'unknown'))}\n"
                
                if len(violations) > 10:
                    alert_message += f"... et {len(violations) - 10} autres violations\n"
                
                alert_message += f"""
üîß ACTION REQUISE : NETTOYAGE IMM√âDIAT N√âCESSAIRE !
üìä Mode surveillance : RENFORC√â (30 secondes)
üéØ Seuil d'alerte : IMM√âDIAT (1√®re d√©tection)
üïí Prochaine v√©rification dans 30 secondes

‚ö° SYST√àME DE SURVEILLANCE HAUTE INTENSIT√â ACTIF ‚ö°
"""
                
                # Log l'alerte avec niveau CRITIQUE
                self.logger.critical(alert_message)
                
                # Sauvegarder l'alerte avec priorit√© √©lev√©e
                await self.db.brand_monitoring_alerts.insert_one({
                    "timestamp": datetime.utcnow(),
                    "violation_count": len(violations),
                    "consecutive_violations": self.violation_count,
                    "message": alert_message,
                    "violations": violations,
                    "alert_level": "CRITICAL_REINFORCED",  # üö® Nouveau niveau d'alerte
                    "scan_mode": "REINFORCED_MONITORING",
                    "frequency": "30_SECONDS"
                })
                
        except Exception as e:
            self.logger.error(f"Erreur envoi alerte renforc√©e: {str(e)}")

    async def run_monitoring_loop(self):
        """
        üö® Boucle principale de surveillance continue RENFORC√âE
        """
        self.logger.info("üöÄüöÄüöÄ D√âMARRAGE AGENT SURVEILLANCE MARQUE JOSMOZE.COM - MODE RENFORC√â üöÄüöÄüöÄ")
        self.logger.info(f"‚ö° SURVEILLANCE HAUTE INTENSIT√â ACTIV√âE ‚ö°")
        self.logger.info(f"üìÖ Intervalle de v√©rification: {MONITORING_CONFIG['check_interval']} secondes (RENFORC√â)")
        self.logger.info(f"üéØ Termes surveill√©s: {', '.join(FORBIDDEN_TERMS)}")
        self.logger.info(f"üö® Seuil d'alerte: IMM√âDIAT (1√®re d√©tection)")
        self.logger.info(f"üîç Points de contr√¥le: 5 URLs web + Fichiers + M√©tadonn√©es")
        
        # Agent temporairement d√©sactiv√© pour performance critique
        self.running = False
        self.logger.info("üîß Agent de surveillance temporairement d√©sactiv√© pour urgence")
        
        while self.running:
            try:
                # Effectuer un scan complet RENFORC√â
                self.logger.info("üîç D√âMARRAGE SCAN RENFORC√â...")
                results = await self.perform_full_scan()
                
                # Envoyer une alerte IMM√âDIATE si n√©cessaire
                if results["violations"]:
                    self.logger.critical(f"üö® VIOLATIONS D√âTECT√âES : {results['violations_found']} violations trouv√©es")
                    await self.send_alert(results["violations"])
                else:
                    self.logger.info(f"‚úÖ SCAN PROPRE - Aucune violation d√©tect√©e")
                
                # Attendre avant le prochain scan (30 secondes)
                self.logger.info(f"‚è≥ Prochaine v√©rification RENFORC√âE dans {MONITORING_CONFIG['check_interval']} secondes...")
                await asyncio.sleep(MONITORING_CONFIG["check_interval"])
                
            except Exception as e:
                self.logger.error(f"üö® ERREUR dans la boucle de surveillance RENFORC√âE: {str(e)}")
                await asyncio.sleep(15)  # Attendre 15s en cas d'erreur (r√©duit pour surveillance renforc√©e)

    def stop_monitoring(self):
        """
        Arr√™te l'agent de surveillance
        """
        self.logger.info("üõë ARR√äT AGENT SURVEILLANCE MARQUE")
        self.running = False

    async def get_monitoring_stats(self) -> Dict:
        """
        Retourne les statistiques de surveillance
        """
        try:
            # Create a new MongoDB client for this request to avoid loop issues
            mongo_url = os.getenv("MONGO_URI", os.getenv("MONGO_URL", ""))
            client = AsyncIOMotorClient(mongo_url)
            db = client[os.getenv("DB_NAME", "josmoze_production")]
            
            # Statistiques des derniers scans
            recent_scans = await db.brand_monitoring.find().sort("scan_time", -1).limit(10).to_list(10)
            
            total_scans = await db.brand_monitoring.count_documents({})
            clean_scans = await db.brand_monitoring.count_documents({"violations_found": 0})
            
            # Statistiques des alertes
            total_alerts = await db.brand_monitoring_alerts.count_documents({})
            
            # Close the client
            client.close()
            
            return {
                "status": "RUNNING" if self.running else "STOPPED",
                "last_scan": self.last_scan_results,
                "total_scans": total_scans,
                "clean_scans": clean_scans,
                "violation_scans": total_scans - clean_scans,
                "total_alerts": total_alerts,
                "recent_scans": recent_scans,
                "current_violation_streak": self.violation_count
            }
            
        except Exception as e:
            self.logger.error(f"Erreur r√©cup√©ration stats: {str(e)}")
            return {"error": str(e)}

# Instance globale de l'agent
brand_monitor = BrandMonitoringAgent()

# Fonctions utilitaires pour l'int√©gration
async def start_brand_monitoring():
    """D√©marre l'agent de surveillance"""
    return await brand_monitor.run_monitoring_loop()

async def stop_brand_monitoring():
    """Arr√™te l'agent de surveillance"""
    brand_monitor.stop_monitoring()

async def get_brand_monitoring_status():
    """R√©cup√®re le statut de surveillance"""
    return await brand_monitor.get_monitoring_stats()

async def force_brand_scan():
    """Force un scan imm√©diat"""
    return await brand_monitor.perform_full_scan()

def start_monitoring_task():
    """D√©marre l'agent de surveillance en arri√®re-plan"""
    try:
        import threading
        import asyncio
        
        def run_monitoring():
            """Fonction pour ex√©cuter la surveillance dans un thread s√©par√©"""
            try:
                # Cr√©er un nouvel √©v√©nement loop pour ce thread
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                
                # Lancer la surveillance
                loop.run_until_complete(brand_monitor.run_monitoring_loop())
            except Exception as e:
                logging.error(f"Erreur dans le thread de surveillance: {e}")
        
        # Lancer dans un thread daemon (se ferme automatiquement avec l'app)
        thread = threading.Thread(target=run_monitoring, daemon=True)
        thread.start()
        
        logging.info("üöÄ Agent de surveillance marque d√©marr√© en arri√®re-plan")
        return {"status": "started", "message": "Agent de surveillance d√©marr√©"}
        
    except Exception as e:
        logging.error(f"Impossible de d√©marrer l'agent de surveillance: {e}")
        return {"status": "error", "message": str(e)}
