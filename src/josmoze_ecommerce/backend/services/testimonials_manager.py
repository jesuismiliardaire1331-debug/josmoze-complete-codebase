"""
‚≠ê GESTIONNAIRE T√âMOIGNAGES - JOSMOZE.COM
Syst√®me d'avis clients avec notation 5 √©toiles et mod√©ration
"""

import os
import uuid
import logging
from datetime import datetime, timezone
from typing import List, Optional, Dict, Any
from enum import Enum

from fastapi import HTTPException
from motor.motor_asyncio import AsyncIOMotorClient
from pydantic import BaseModel, Field, validator

# Configuration
MONGO_URL = os.environ.get("MONGO_URL", "mongodb://localhost:27017")
DB_NAME = os.environ.get("DB_NAME", "josmoze_production")

class TestimonialStatus(str, Enum):
    PENDING = "pending"
    APPROVED = "approved"
    REJECTED = "rejected"

class CustomerTestimonial(BaseModel):
    """Mod√®le de t√©moignage client"""
    id: Optional[str] = None
    customer_name: str = Field(..., min_length=2, max_length=100)
    customer_email: str = Field(..., pattern=r'^[^@]+@[^@]+\.[^@]+$')
    customer_city: Optional[str] = Field(None, max_length=100)
    product_id: str = Field(..., min_length=1)
    product_name: Optional[str] = None
    rating: int = Field(..., ge=1, le=5)
    title: str = Field(..., min_length=5, max_length=150)
    content: str = Field(..., min_length=10, max_length=2000)
    pros: List[str] = Field(default=[])
    cons: List[str] = Field(default=[])
    purchase_date: Optional[datetime] = None
    usage_duration: Optional[str] = None  # "6 mois", "1 an", etc.
    would_recommend: bool = Field(default=True)
    installation_photo: Optional[str] = None
    status: TestimonialStatus = Field(default=TestimonialStatus.PENDING)
    admin_notes: Optional[str] = None
    created_date: Optional[datetime] = None
    approved_date: Optional[datetime] = None
    helpful_votes: int = Field(default=0)
    total_votes: int = Field(default=0)

class TestimonialsManager:
    def __init__(self):
        self.client = None
        self.db = None
        
    async def initialize(self):
        """Initialiser la connexion MongoDB"""
        if not self.client:
            self.client = AsyncIOMotorClient(MONGO_URL)
            self.db = self.client[DB_NAME]
            
    async def submit_testimonial(self, testimonial_data: CustomerTestimonial) -> dict:
        """
        ‚≠ê Soumettre un nouveau t√©moignage client
        
        Args:
            testimonial_data: Donn√©es du t√©moignage
            
        Returns:
            Dict avec informations du t√©moignage cr√©√©
        """
        await self.initialize()
        
        # G√©n√©rer ID unique
        testimonial_data.id = str(uuid.uuid4())
        testimonial_data.created_date = datetime.now(timezone.utc)
        
        # R√©cup√©rer nom du produit si pas fourni
        if not testimonial_data.product_name:
            product = await self.db.products.find_one({"id": testimonial_data.product_id})
            if product:
                testimonial_data.product_name = product.get("name", "Produit Josmoze")
        
        # Sauvegarde
        await self.db.testimonials.insert_one(testimonial_data.dict())
        
        logging.info(f"‚úÖ T√©moignage soumis: {testimonial_data.customer_name} - {testimonial_data.rating}‚≠ê")
        
        return {
            "success": True,
            "testimonial_id": testimonial_data.id,
            "message": "T√©moignage soumis avec succ√®s ! Il sera publi√© apr√®s mod√©ration."
        }
        
    async def get_testimonials(
        self, 
        status: Optional[TestimonialStatus] = TestimonialStatus.APPROVED,
        product_id: Optional[str] = None,
        limit: int = 10,
        skip: int = 0,
        min_rating: Optional[int] = None
    ) -> List[dict]:
        """‚≠ê R√©cup√©rer liste des t√©moignages"""
        await self.initialize()
        
        query = {}
        if status:
            query["status"] = status
        if product_id:
            query["product_id"] = product_id
        if min_rating:
            query["rating"] = {"$gte": min_rating}
            
        cursor = self.db.testimonials.find(query).sort("approved_date", -1).skip(skip).limit(limit)
        testimonials = await cursor.to_list(length=None)
        
        return testimonials
        
    async def get_testimonial_stats(self, product_id: Optional[str] = None) -> dict:
        """üìä Statistiques des t√©moignages"""
        await self.initialize()
        
        match_stage = {"status": "approved"}
        if product_id:
            match_stage["product_id"] = product_id
            
        pipeline = [
            {"$match": match_stage},
            {"$group": {
                "_id": None,
                "total_reviews": {"$sum": 1},
                "average_rating": {"$avg": "$rating"},
                "rating_distribution": {
                    "$push": {
                        "$switch": {
                            "branches": [
                                {"case": {"$eq": ["$rating", 5]}, "then": "5_stars"},
                                {"case": {"$eq": ["$rating", 4]}, "then": "4_stars"},
                                {"case": {"$eq": ["$rating", 3]}, "then": "3_stars"},
                                {"case": {"$eq": ["$rating", 2]}, "then": "2_stars"},
                                {"case": {"$eq": ["$rating", 1]}, "then": "1_star"}
                            ],
                            "default": "unknown"
                        }
                    }
                }
            }}
        ]
        
        cursor = self.db.testimonials.aggregate(pipeline)
        results = await cursor.to_list(length=None)
        
        if not results:
            return {
                "total_reviews": 0,
                "average_rating": 0,
                "rating_distribution": {"5": 0, "4": 0, "3": 0, "2": 0, "1": 0}
            }
            
        stats = results[0]
        
        # Calculer distribution des notes
        distribution = {"5": 0, "4": 0, "3": 0, "2": 0, "1": 0}
        for rating in stats.get("rating_distribution", []):
            if rating == "5_stars":
                distribution["5"] += 1
            elif rating == "4_stars":
                distribution["4"] += 1
            elif rating == "3_stars":
                distribution["3"] += 1
            elif rating == "2_stars":
                distribution["2"] += 1
            elif rating == "1_star":
                distribution["1"] += 1
                
        return {
            "total_reviews": stats.get("total_reviews", 0),
            "average_rating": round(stats.get("average_rating", 0), 1),
            "rating_distribution": distribution
        }
        
    async def moderate_testimonial(self, testimonial_id: str, action: TestimonialStatus, admin_notes: Optional[str] = None) -> dict:
        """üõ°Ô∏è Mod√©rer un t√©moignage (admin)"""
        await self.initialize()
        
        update_data = {
            "status": action,
            "admin_notes": admin_notes
        }
        
        if action == TestimonialStatus.APPROVED:
            update_data["approved_date"] = datetime.now(timezone.utc)
            
        result = await self.db.testimonials.update_one(
            {"id": testimonial_id},
            {"$set": update_data}
        )
        
        if result.modified_count == 0:
            raise HTTPException(404, "T√©moignage non trouv√©")
            
        return {"success": True, "message": f"T√©moignage {action}"}
        
    async def vote_helpful(self, testimonial_id: str, helpful: bool = True) -> dict:
        """üëç Voter pour l'utilit√© d'un t√©moignage"""
        await self.initialize()
        
        increment = {"total_votes": 1}
        if helpful:
            increment["helpful_votes"] = 1
            
        result = await self.db.testimonials.update_one(
            {"id": testimonial_id, "status": "approved"},
            {"$inc": increment}
        )
        
        if result.modified_count == 0:
            raise HTTPException(404, "T√©moignage non trouv√© ou non approuv√©")
            
        return {"success": True, "message": "Vote enregistr√©"}
        
    async def get_featured_testimonials(self) -> List[dict]:
        """üåü T√©moignages vedettes (pour homepage)"""
        await self.initialize()
        
        # R√©cup√©rer les meilleurs t√©moignages (5 √©toiles, plus de votes positifs)
        pipeline = [
            {"$match": {"status": "approved", "rating": 5}},
            {"$addFields": {
                "helpfulness_ratio": {
                    "$cond": {
                        "if": {"$gt": ["$total_votes", 0]},
                        "then": {"$divide": ["$helpful_votes", "$total_votes"]},
                        "else": 0
                    }
                }
            }},
            {"$sort": {"helpfulness_ratio": -1, "helpful_votes": -1}},
            {"$limit": 6}
        ]
        
        cursor = self.db.testimonials.aggregate(pipeline)
        testimonials = await cursor.to_list(length=None)
        
        return testimonials

# T√©moignages par d√©faut pour la d√©mo
DEFAULT_TESTIMONIALS = [
    {
        "customer_name": "Marie Dubois",
        "customer_email": "marie.dubois@example.com",
        "customer_city": "Lyon",
        "product_id": "osmoseur-premium",
        "product_name": "Osmoseur Premium - BlueMountain Avanc√©",
        "rating": 5,
        "title": "Une eau parfaitement pure, enfin !",
        "content": "Apr√®s 8 mois d'utilisation, je ne peux que recommander cet osmoseur. L'eau a un go√ªt incroyable, mes enfants boivent enfin de l'eau avec plaisir ! L'installation a √©t√© rapide et le service client est excellent. Plus besoin d'acheter des packs d'eau, c'est un vrai soulagement pour le dos et le portefeuille.",
        "pros": ["Go√ªt excellent", "Installation rapide", "√âconomies importantes", "Service client r√©actif"],
        "cons": ["Un peu encombrant sous l'√©vier"],
        "usage_duration": "8 mois",
        "would_recommend": True,
        "status": "approved",
        "helpful_votes": 24,
        "total_votes": 27
    },
    {
        "customer_name": "Jean-Pierre Martin",
        "customer_email": "jp.martin@example.com", 
        "customer_city": "Marseille",
        "product_id": "osmoseur-essentiel",
        "product_name": "Osmoseur Essentiel - BlueMountain Compact",
        "rating": 5,
        "title": "Parfait pour notre famille de 4 !",
        "content": "L'eau de Marseille √©tant tr√®s calcaire, nous cherchions une solution efficace. Cet osmoseur a d√©pass√© nos attentes ! Plus de traces blanches sur les verres, l'eau est d√©licieuse et nos appareils √©lectrom√©nagers nous remercient. Le rapport qualit√©-prix est imbattable.",
        "pros": ["Eau sans calcaire", "Prix abordable", "Facile d'entretien", "R√©sultats imm√©diats"],
        "cons": [],
        "usage_duration": "1 an",
        "would_recommend": True,
        "status": "approved",
        "helpful_votes": 31,
        "total_votes": 33
    },
    {
        "customer_name": "Sophie Leroy",
        "customer_email": "sophie.leroy@example.com",
        "customer_city": "Nantes", 
        "product_id": "osmoseur-prestige",
        "product_name": "Osmoseur Prestige - BlueMountain De Comptoir",
        "rating": 5,
        "title": "Le top du top pour notre b√©b√©",
        "content": "Avec l'arriv√©e de notre premier enfant, nous voulions le meilleur pour sa sant√©. Cet osmoseur haut de gamme nous donne une tranquillit√© d'esprit totale. L'√©cran tactile est tr√®s pratique, la qualit√© de filtration est exceptionnelle. Notre b√©b√© grandit sereinement avec une eau 100% pure.",
        "pros": ["Qualit√© exceptionnelle", "√âcran tactile moderne", "Tranquillit√© d'esprit", "Parfait pour b√©b√©"],
        "cons": ["Prix √©lev√© mais justifi√©"],
        "usage_duration": "6 mois",
        "would_recommend": True,
        "status": "approved",
        "helpful_votes": 18,
        "total_votes": 19
    },
    {
        "customer_name": "Claude Moreau",
        "customer_email": "claude.moreau@example.com",
        "customer_city": "Toulouse",
        "product_id": "purificateur-portable-hydrogene",
        "product_name": "Purificateur Portable √† Hydrog√®ne H2-Pro",
        "rating": 4,
        "title": "Pratique et efficace en d√©placement",
        "content": "Je voyage beaucoup pour le travail et cette bouteille purificatrice est devenue indispensable. L'eau du robinet des h√¥tels est transform√©e en eau pure en quelques minutes. Compact, √©l√©gant et tr√®s efficace. Petit b√©mol sur l'autonomie de la batterie qui pourrait √™tre meilleure.",
        "pros": ["Ultra portable", "Design √©l√©gant", "Efficacit√© prouv√©e", "Parfait en voyage"],
        "cons": ["Autonomie batterie limit√©e"],
        "usage_duration": "4 mois",
        "would_recommend": True,
        "status": "approved",
        "helpful_votes": 12,
        "total_votes": 15
    },
    {
        "customer_name": "Isabelle Petit",
        "customer_email": "isabelle.petit@example.com",
        "customer_city": "Bordeaux",
        "product_id": "fontaine-eau-animaux", 
        "product_name": "Fontaine √† Eau pour Animaux AquaPet Premium",
        "rating": 5,
        "title": "Mes chats adorent leur nouvelle fontaine !",
        "content": "Mes deux chats boudaient leur gamelle d'eau. Depuis l'installation de cette fontaine, ils boivent beaucoup plus ! L'eau est toujours fra√Æche et filtr√©e. La fontaine est silencieuse et tr√®s facile √† nettoyer. Un excellent investissement pour la sant√© de nos compagnons.",
        "pros": ["Chats boivent plus", "Eau toujours fra√Æche", "Tr√®s silencieuse", "Facile √† nettoyer"],
        "cons": [],
        "usage_duration": "3 mois",
        "would_recommend": True,
        "status": "approved",
        "helpful_votes": 9,
        "total_votes": 10
    }
]

# Instance globale
testimonials_manager = TestimonialsManager()

async def get_testimonials_manager():
    """Factory pour r√©cup√©rer le gestionnaire de t√©moignages"""
    return testimonials_manager

async def initialize_default_testimonials():
    """Initialiser les t√©moignages par d√©faut"""
    manager = await get_testimonials_manager()
    await manager.initialize()
    
    for testimonial_data in DEFAULT_TESTIMONIALS:
        # V√©rifier si le t√©moignage existe d√©j√†
        existing = await manager.db.testimonials.find_one({
            "customer_email": testimonial_data["customer_email"],
            "product_id": testimonial_data["product_id"]
        })
        
        if not existing:
            testimonial = CustomerTestimonial(**testimonial_data)
            testimonial.id = str(uuid.uuid4())
            testimonial.created_date = datetime.now(timezone.utc)
            testimonial.approved_date = datetime.now(timezone.utc)
            
            await manager.db.testimonials.insert_one(testimonial.dict())
            logging.info(f"‚úÖ T√©moignage par d√©faut cr√©√©: {testimonial.customer_name} - {testimonial.rating}‚≠ê")